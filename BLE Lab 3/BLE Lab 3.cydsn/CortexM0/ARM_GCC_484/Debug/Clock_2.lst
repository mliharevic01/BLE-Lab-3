ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Clock_2.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Clock_2_StartEx,"ax",%progbits
  18              		.align	2
  19              		.global	Clock_2_StartEx
  20              		.code	16
  21              		.thumb_func
  22              		.type	Clock_2_StartEx, %function
  23              	Clock_2_StartEx:
  24              	.LFB0:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\Clock_2.c"
   1:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/Clock_2.c **** * File Name: Clock_2.c
   3:.\Generated_Source\PSoC4/Clock_2.c **** * Version 2.20
   4:.\Generated_Source\PSoC4/Clock_2.c **** *
   5:.\Generated_Source\PSoC4/Clock_2.c **** *  Description:
   6:.\Generated_Source\PSoC4/Clock_2.c **** *   Provides system API for the clocking, interrupts and watchdog timer.
   7:.\Generated_Source\PSoC4/Clock_2.c **** *
   8:.\Generated_Source\PSoC4/Clock_2.c **** *  Note:
   9:.\Generated_Source\PSoC4/Clock_2.c **** *   Documentation of the API's in this file is located in the
  10:.\Generated_Source\PSoC4/Clock_2.c **** *   System Reference Guide provided with PSoC Creator.
  11:.\Generated_Source\PSoC4/Clock_2.c **** *
  12:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
  13:.\Generated_Source\PSoC4/Clock_2.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  14:.\Generated_Source\PSoC4/Clock_2.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:.\Generated_Source\PSoC4/Clock_2.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:.\Generated_Source\PSoC4/Clock_2.c **** * the software package with which this file was provided.
  17:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
  18:.\Generated_Source\PSoC4/Clock_2.c **** 
  19:.\Generated_Source\PSoC4/Clock_2.c **** #include <cydevice_trm.h>
  20:.\Generated_Source\PSoC4/Clock_2.c **** #include "Clock_2.h"
  21:.\Generated_Source\PSoC4/Clock_2.c **** 
  22:.\Generated_Source\PSoC4/Clock_2.c **** #if defined CYREG_PERI_DIV_CMD
  23:.\Generated_Source\PSoC4/Clock_2.c **** 
  24:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
  25:.\Generated_Source\PSoC4/Clock_2.c **** * Function Name: Clock_2_StartEx
  26:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
  27:.\Generated_Source\PSoC4/Clock_2.c **** *
  28:.\Generated_Source\PSoC4/Clock_2.c **** * Summary:
  29:.\Generated_Source\PSoC4/Clock_2.c **** *  Starts the clock, aligned to the specified running clock.
  30:.\Generated_Source\PSoC4/Clock_2.c **** *
  31:.\Generated_Source\PSoC4/Clock_2.c **** * Parameters:
  32:.\Generated_Source\PSoC4/Clock_2.c **** *  alignClkDiv:  The divider to which phase alignment is performed when the
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 2


  33:.\Generated_Source\PSoC4/Clock_2.c **** *    clock is started.
  34:.\Generated_Source\PSoC4/Clock_2.c **** *
  35:.\Generated_Source\PSoC4/Clock_2.c **** * Returns:
  36:.\Generated_Source\PSoC4/Clock_2.c **** *  None
  37:.\Generated_Source\PSoC4/Clock_2.c **** *
  38:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
  39:.\Generated_Source\PSoC4/Clock_2.c **** void Clock_2_StartEx(uint32 alignClkDiv)
  40:.\Generated_Source\PSoC4/Clock_2.c **** {
  26              		.loc 1 40 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 16
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 7860     		str	r0, [r7, #4]
  41:.\Generated_Source\PSoC4/Clock_2.c ****     /* Make sure any previous start command has finished. */
  42:.\Generated_Source\PSoC4/Clock_2.c ****     while((Clock_2_CMD_REG & Clock_2_CMD_ENABLE_MASK) != 0u)
  37              		.loc 1 42 0
  38 0008 C046     		mov	r8, r8
  39              	.L2:
  40              		.loc 1 42 0 is_stmt 0 discriminator 1
  41 000a 064B     		ldr	r3, .L3
  42 000c 1B68     		ldr	r3, [r3]
  43 000e 002B     		cmp	r3, #0
  44 0010 FBDB     		blt	.L2
  43:.\Generated_Source\PSoC4/Clock_2.c ****     {
  44:.\Generated_Source\PSoC4/Clock_2.c ****     }
  45:.\Generated_Source\PSoC4/Clock_2.c ****     
  46:.\Generated_Source\PSoC4/Clock_2.c ****     /* Specify the target divider and it's alignment divider, and enable. */
  47:.\Generated_Source\PSoC4/Clock_2.c ****     Clock_2_CMD_REG =
  45              		.loc 1 47 0 is_stmt 1
  46 0012 044B     		ldr	r3, .L3
  48:.\Generated_Source\PSoC4/Clock_2.c ****         ((uint32)Clock_2__DIV_ID << Clock_2_CMD_DIV_SHIFT)|
  49:.\Generated_Source\PSoC4/Clock_2.c ****         (alignClkDiv << Clock_2_CMD_PA_DIV_SHIFT) |
  47              		.loc 1 49 0
  48 0014 7A68     		ldr	r2, [r7, #4]
  49 0016 1202     		lsl	r2, r2, #8
  50 0018 0349     		ldr	r1, .L3+4
  51 001a 0A43     		orr	r2, r1
  47:.\Generated_Source\PSoC4/Clock_2.c ****     Clock_2_CMD_REG =
  52              		.loc 1 47 0
  53 001c 1A60     		str	r2, [r3]
  50:.\Generated_Source\PSoC4/Clock_2.c ****         (uint32)Clock_2_CMD_ENABLE_MASK;
  51:.\Generated_Source\PSoC4/Clock_2.c **** }
  54              		.loc 1 51 0
  55 001e BD46     		mov	sp, r7
  56 0020 02B0     		add	sp, sp, #8
  57              		@ sp needed
  58 0022 80BD     		pop	{r7, pc}
  59              	.L4:
  60              		.align	2
  61              	.L3:
  62 0024 00000140 		.word	1073807360
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 3


  63 0028 80000080 		.word	-2147483520
  64              		.cfi_endproc
  65              	.LFE0:
  66              		.size	Clock_2_StartEx, .-Clock_2_StartEx
  67              		.section	.text.Clock_2_Stop,"ax",%progbits
  68              		.align	2
  69              		.global	Clock_2_Stop
  70              		.code	16
  71              		.thumb_func
  72              		.type	Clock_2_Stop, %function
  73              	Clock_2_Stop:
  74              	.LFB1:
  52:.\Generated_Source\PSoC4/Clock_2.c **** 
  53:.\Generated_Source\PSoC4/Clock_2.c **** #else
  54:.\Generated_Source\PSoC4/Clock_2.c **** 
  55:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
  56:.\Generated_Source\PSoC4/Clock_2.c **** * Function Name: Clock_2_Start
  57:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
  58:.\Generated_Source\PSoC4/Clock_2.c **** *
  59:.\Generated_Source\PSoC4/Clock_2.c **** * Summary:
  60:.\Generated_Source\PSoC4/Clock_2.c **** *  Starts the clock.
  61:.\Generated_Source\PSoC4/Clock_2.c **** *
  62:.\Generated_Source\PSoC4/Clock_2.c **** * Parameters:
  63:.\Generated_Source\PSoC4/Clock_2.c **** *  None
  64:.\Generated_Source\PSoC4/Clock_2.c **** *
  65:.\Generated_Source\PSoC4/Clock_2.c **** * Returns:
  66:.\Generated_Source\PSoC4/Clock_2.c **** *  None
  67:.\Generated_Source\PSoC4/Clock_2.c **** *
  68:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
  69:.\Generated_Source\PSoC4/Clock_2.c **** 
  70:.\Generated_Source\PSoC4/Clock_2.c **** void Clock_2_Start(void)
  71:.\Generated_Source\PSoC4/Clock_2.c **** {
  72:.\Generated_Source\PSoC4/Clock_2.c ****     /* Set the bit to enable the clock. */
  73:.\Generated_Source\PSoC4/Clock_2.c ****     Clock_2_ENABLE_REG |= Clock_2__ENABLE_MASK;
  74:.\Generated_Source\PSoC4/Clock_2.c **** }
  75:.\Generated_Source\PSoC4/Clock_2.c **** 
  76:.\Generated_Source\PSoC4/Clock_2.c **** #endif /* CYREG_PERI_DIV_CMD */
  77:.\Generated_Source\PSoC4/Clock_2.c **** 
  78:.\Generated_Source\PSoC4/Clock_2.c **** 
  79:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
  80:.\Generated_Source\PSoC4/Clock_2.c **** * Function Name: Clock_2_Stop
  81:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
  82:.\Generated_Source\PSoC4/Clock_2.c **** *
  83:.\Generated_Source\PSoC4/Clock_2.c **** * Summary:
  84:.\Generated_Source\PSoC4/Clock_2.c **** *  Stops the clock and returns immediately. This API does not require the
  85:.\Generated_Source\PSoC4/Clock_2.c **** *  source clock to be running but may return before the hardware is actually
  86:.\Generated_Source\PSoC4/Clock_2.c **** *  disabled.
  87:.\Generated_Source\PSoC4/Clock_2.c **** *
  88:.\Generated_Source\PSoC4/Clock_2.c **** * Parameters:
  89:.\Generated_Source\PSoC4/Clock_2.c **** *  None
  90:.\Generated_Source\PSoC4/Clock_2.c **** *
  91:.\Generated_Source\PSoC4/Clock_2.c **** * Returns:
  92:.\Generated_Source\PSoC4/Clock_2.c **** *  None
  93:.\Generated_Source\PSoC4/Clock_2.c **** *
  94:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
  95:.\Generated_Source\PSoC4/Clock_2.c **** void Clock_2_Stop(void)
  96:.\Generated_Source\PSoC4/Clock_2.c **** {
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 4


  75              		.loc 1 96 0
  76              		.cfi_startproc
  77 0000 80B5     		push	{r7, lr}
  78              		.cfi_def_cfa_offset 8
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 00AF     		add	r7, sp, #0
  82              		.cfi_def_cfa_register 7
  97:.\Generated_Source\PSoC4/Clock_2.c **** #if defined CYREG_PERI_DIV_CMD
  98:.\Generated_Source\PSoC4/Clock_2.c **** 
  99:.\Generated_Source\PSoC4/Clock_2.c ****     /* Make sure any previous start command has finished. */
 100:.\Generated_Source\PSoC4/Clock_2.c ****     while((Clock_2_CMD_REG & Clock_2_CMD_ENABLE_MASK) != 0u)
  83              		.loc 1 100 0
  84 0004 C046     		mov	r8, r8
  85              	.L6:
  86              		.loc 1 100 0 is_stmt 0 discriminator 1
  87 0006 044B     		ldr	r3, .L7
  88 0008 1B68     		ldr	r3, [r3]
  89 000a 002B     		cmp	r3, #0
  90 000c FBDB     		blt	.L6
 101:.\Generated_Source\PSoC4/Clock_2.c ****     {
 102:.\Generated_Source\PSoC4/Clock_2.c ****     }
 103:.\Generated_Source\PSoC4/Clock_2.c ****     
 104:.\Generated_Source\PSoC4/Clock_2.c ****     /* Specify the target divider and it's alignment divider, and disable. */
 105:.\Generated_Source\PSoC4/Clock_2.c ****     Clock_2_CMD_REG =
  91              		.loc 1 105 0 is_stmt 1
  92 000e 024B     		ldr	r3, .L7
  93 0010 024A     		ldr	r2, .L7+4
  94 0012 1A60     		str	r2, [r3]
 106:.\Generated_Source\PSoC4/Clock_2.c ****         ((uint32)Clock_2__DIV_ID << Clock_2_CMD_DIV_SHIFT)|
 107:.\Generated_Source\PSoC4/Clock_2.c ****         ((uint32)Clock_2_CMD_DISABLE_MASK);
 108:.\Generated_Source\PSoC4/Clock_2.c **** 
 109:.\Generated_Source\PSoC4/Clock_2.c **** #else
 110:.\Generated_Source\PSoC4/Clock_2.c **** 
 111:.\Generated_Source\PSoC4/Clock_2.c ****     /* Clear the bit to disable the clock. */
 112:.\Generated_Source\PSoC4/Clock_2.c ****     Clock_2_ENABLE_REG &= (uint32)(~Clock_2__ENABLE_MASK);
 113:.\Generated_Source\PSoC4/Clock_2.c ****     
 114:.\Generated_Source\PSoC4/Clock_2.c **** #endif /* CYREG_PERI_DIV_CMD */
 115:.\Generated_Source\PSoC4/Clock_2.c **** }
  95              		.loc 1 115 0
  96 0014 BD46     		mov	sp, r7
  97              		@ sp needed
  98 0016 80BD     		pop	{r7, pc}
  99              	.L8:
 100              		.align	2
 101              	.L7:
 102 0018 00000140 		.word	1073807360
 103 001c 80000040 		.word	1073741952
 104              		.cfi_endproc
 105              	.LFE1:
 106              		.size	Clock_2_Stop, .-Clock_2_Stop
 107              		.section	.text.Clock_2_SetFractionalDividerRegister,"ax",%progbits
 108              		.align	2
 109              		.global	Clock_2_SetFractionalDividerRegister
 110              		.code	16
 111              		.thumb_func
 112              		.type	Clock_2_SetFractionalDividerRegister, %function
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 5


 113              	Clock_2_SetFractionalDividerRegister:
 114              	.LFB2:
 116:.\Generated_Source\PSoC4/Clock_2.c **** 
 117:.\Generated_Source\PSoC4/Clock_2.c **** 
 118:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
 119:.\Generated_Source\PSoC4/Clock_2.c **** * Function Name: Clock_2_SetFractionalDividerRegister
 120:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
 121:.\Generated_Source\PSoC4/Clock_2.c **** *
 122:.\Generated_Source\PSoC4/Clock_2.c **** * Summary:
 123:.\Generated_Source\PSoC4/Clock_2.c **** *  Modifies the clock divider and the fractional divider.
 124:.\Generated_Source\PSoC4/Clock_2.c **** *
 125:.\Generated_Source\PSoC4/Clock_2.c **** * Parameters:
 126:.\Generated_Source\PSoC4/Clock_2.c **** *  clkDivider:  Divider register value (0-65535). This value is NOT the
 127:.\Generated_Source\PSoC4/Clock_2.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 128:.\Generated_Source\PSoC4/Clock_2.c **** *    to divide the clock by 2, this parameter should be set to 1.
 129:.\Generated_Source\PSoC4/Clock_2.c **** *  fracDivider:  Fractional Divider register value (0-31).
 130:.\Generated_Source\PSoC4/Clock_2.c **** * Returns:
 131:.\Generated_Source\PSoC4/Clock_2.c **** *  None
 132:.\Generated_Source\PSoC4/Clock_2.c **** *
 133:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
 134:.\Generated_Source\PSoC4/Clock_2.c **** void Clock_2_SetFractionalDividerRegister(uint16 clkDivider, uint8 clkFractional)
 135:.\Generated_Source\PSoC4/Clock_2.c **** {
 115              		.loc 1 135 0
 116              		.cfi_startproc
 117 0000 80B5     		push	{r7, lr}
 118              		.cfi_def_cfa_offset 8
 119              		.cfi_offset 7, -8
 120              		.cfi_offset 14, -4
 121 0002 84B0     		sub	sp, sp, #16
 122              		.cfi_def_cfa_offset 24
 123 0004 00AF     		add	r7, sp, #0
 124              		.cfi_def_cfa_register 7
 125 0006 0A1C     		mov	r2, r1
 126 0008 BB1D     		add	r3, r7, #6
 127 000a 011C     		add	r1, r0, #0
 128 000c 1980     		strh	r1, [r3]
 129 000e 7B1D     		add	r3, r7, #5
 130 0010 1A70     		strb	r2, [r3]
 136:.\Generated_Source\PSoC4/Clock_2.c ****     uint32 maskVal;
 137:.\Generated_Source\PSoC4/Clock_2.c ****     uint32 regVal;
 138:.\Generated_Source\PSoC4/Clock_2.c ****     
 139:.\Generated_Source\PSoC4/Clock_2.c **** #if defined (Clock_2__FRAC_MASK) || defined (CYREG_PERI_DIV_CMD)
 140:.\Generated_Source\PSoC4/Clock_2.c ****     
 141:.\Generated_Source\PSoC4/Clock_2.c **** 	/* get all but divider bits */
 142:.\Generated_Source\PSoC4/Clock_2.c ****     maskVal = Clock_2_DIV_REG & 
 131              		.loc 1 142 0
 132 0012 0B4B     		ldr	r3, .L10
 133 0014 1A68     		ldr	r2, [r3]
 134 0016 0723     		mov	r3, #7
 135 0018 1340     		and	r3, r2
 136 001a FB60     		str	r3, [r7, #12]
 143:.\Generated_Source\PSoC4/Clock_2.c ****                     (uint32)(~(uint32)(Clock_2_DIV_INT_MASK | Clock_2_DIV_FRAC_MASK)); 
 144:.\Generated_Source\PSoC4/Clock_2.c **** 	/* combine mask and new divider vals into 32-bit value */
 145:.\Generated_Source\PSoC4/Clock_2.c ****     regVal = maskVal |
 146:.\Generated_Source\PSoC4/Clock_2.c ****         ((uint32)((uint32)clkDivider <<  Clock_2_DIV_INT_SHIFT) & Clock_2_DIV_INT_MASK) |
 137              		.loc 1 146 0
 138 001c BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 6


 139 001e 1B88     		ldrh	r3, [r3]
 140 0020 1A02     		lsl	r2, r3, #8
 145:.\Generated_Source\PSoC4/Clock_2.c ****     regVal = maskVal |
 141              		.loc 1 145 0
 142 0022 FB68     		ldr	r3, [r7, #12]
 143 0024 1A43     		orr	r2, r3
 147:.\Generated_Source\PSoC4/Clock_2.c ****         ((uint32)((uint32)clkFractional << Clock_2_DIV_FRAC_SHIFT) & Clock_2_DIV_FRAC_MASK);
 144              		.loc 1 147 0
 145 0026 7B1D     		add	r3, r7, #5
 146 0028 1B78     		ldrb	r3, [r3]
 147 002a D900     		lsl	r1, r3, #3
 148 002c FF23     		mov	r3, #255
 149 002e 0B40     		and	r3, r1
 145:.\Generated_Source\PSoC4/Clock_2.c ****     regVal = maskVal |
 150              		.loc 1 145 0
 151 0030 1343     		orr	r3, r2
 152 0032 BB60     		str	r3, [r7, #8]
 148:.\Generated_Source\PSoC4/Clock_2.c ****     
 149:.\Generated_Source\PSoC4/Clock_2.c **** #else
 150:.\Generated_Source\PSoC4/Clock_2.c ****     /* get all but integer divider bits */
 151:.\Generated_Source\PSoC4/Clock_2.c ****     maskVal = Clock_2_DIV_REG & (uint32)(~(uint32)Clock_2__DIVIDER_MASK);
 152:.\Generated_Source\PSoC4/Clock_2.c ****     /* combine mask and new divider val into 32-bit value */
 153:.\Generated_Source\PSoC4/Clock_2.c ****     regVal = clkDivider | maskVal;
 154:.\Generated_Source\PSoC4/Clock_2.c ****     
 155:.\Generated_Source\PSoC4/Clock_2.c **** #endif /* Clock_2__FRAC_MASK || CYREG_PERI_DIV_CMD */
 156:.\Generated_Source\PSoC4/Clock_2.c **** 
 157:.\Generated_Source\PSoC4/Clock_2.c ****     Clock_2_DIV_REG = regVal;
 153              		.loc 1 157 0
 154 0034 024B     		ldr	r3, .L10
 155 0036 BA68     		ldr	r2, [r7, #8]
 156 0038 1A60     		str	r2, [r3]
 158:.\Generated_Source\PSoC4/Clock_2.c **** }
 157              		.loc 1 158 0
 158 003a BD46     		mov	sp, r7
 159 003c 04B0     		add	sp, sp, #16
 160              		@ sp needed
 161 003e 80BD     		pop	{r7, pc}
 162              	.L11:
 163              		.align	2
 164              	.L10:
 165 0040 00040140 		.word	1073808384
 166              		.cfi_endproc
 167              	.LFE2:
 168              		.size	Clock_2_SetFractionalDividerRegister, .-Clock_2_SetFractionalDividerRegister
 169              		.section	.text.Clock_2_GetDividerRegister,"ax",%progbits
 170              		.align	2
 171              		.global	Clock_2_GetDividerRegister
 172              		.code	16
 173              		.thumb_func
 174              		.type	Clock_2_GetDividerRegister, %function
 175              	Clock_2_GetDividerRegister:
 176              	.LFB3:
 159:.\Generated_Source\PSoC4/Clock_2.c **** 
 160:.\Generated_Source\PSoC4/Clock_2.c **** 
 161:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
 162:.\Generated_Source\PSoC4/Clock_2.c **** * Function Name: Clock_2_GetDividerRegister
 163:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 7


 164:.\Generated_Source\PSoC4/Clock_2.c **** *
 165:.\Generated_Source\PSoC4/Clock_2.c **** * Summary:
 166:.\Generated_Source\PSoC4/Clock_2.c **** *  Gets the clock divider register value.
 167:.\Generated_Source\PSoC4/Clock_2.c **** *
 168:.\Generated_Source\PSoC4/Clock_2.c **** * Parameters:
 169:.\Generated_Source\PSoC4/Clock_2.c **** *  None
 170:.\Generated_Source\PSoC4/Clock_2.c **** *
 171:.\Generated_Source\PSoC4/Clock_2.c **** * Returns:
 172:.\Generated_Source\PSoC4/Clock_2.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 173:.\Generated_Source\PSoC4/Clock_2.c **** *  divide by 2, the return value will be 1.
 174:.\Generated_Source\PSoC4/Clock_2.c **** *
 175:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
 176:.\Generated_Source\PSoC4/Clock_2.c **** uint16 Clock_2_GetDividerRegister(void)
 177:.\Generated_Source\PSoC4/Clock_2.c **** {
 177              		.loc 1 177 0
 178              		.cfi_startproc
 179 0000 80B5     		push	{r7, lr}
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 00AF     		add	r7, sp, #0
 184              		.cfi_def_cfa_register 7
 178:.\Generated_Source\PSoC4/Clock_2.c ****     return (uint16)((Clock_2_DIV_REG & Clock_2_DIV_INT_MASK)
 185              		.loc 1 178 0
 186 0004 034B     		ldr	r3, .L14
 187 0006 1B68     		ldr	r3, [r3]
 179:.\Generated_Source\PSoC4/Clock_2.c ****         >> Clock_2_DIV_INT_SHIFT);
 188              		.loc 1 179 0
 189 0008 1B0A     		lsr	r3, r3, #8
 178:.\Generated_Source\PSoC4/Clock_2.c ****     return (uint16)((Clock_2_DIV_REG & Clock_2_DIV_INT_MASK)
 190              		.loc 1 178 0
 191 000a 9BB2     		uxth	r3, r3
 180:.\Generated_Source\PSoC4/Clock_2.c **** }
 192              		.loc 1 180 0
 193 000c 181C     		mov	r0, r3
 194 000e BD46     		mov	sp, r7
 195              		@ sp needed
 196 0010 80BD     		pop	{r7, pc}
 197              	.L15:
 198 0012 C046     		.align	2
 199              	.L14:
 200 0014 00040140 		.word	1073808384
 201              		.cfi_endproc
 202              	.LFE3:
 203              		.size	Clock_2_GetDividerRegister, .-Clock_2_GetDividerRegister
 204              		.section	.text.Clock_2_GetFractionalDividerRegister,"ax",%progbits
 205              		.align	2
 206              		.global	Clock_2_GetFractionalDividerRegister
 207              		.code	16
 208              		.thumb_func
 209              		.type	Clock_2_GetFractionalDividerRegister, %function
 210              	Clock_2_GetFractionalDividerRegister:
 211              	.LFB4:
 181:.\Generated_Source\PSoC4/Clock_2.c **** 
 182:.\Generated_Source\PSoC4/Clock_2.c **** 
 183:.\Generated_Source\PSoC4/Clock_2.c **** /*******************************************************************************
 184:.\Generated_Source\PSoC4/Clock_2.c **** * Function Name: Clock_2_GetFractionalDividerRegister
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 8


 185:.\Generated_Source\PSoC4/Clock_2.c **** ********************************************************************************
 186:.\Generated_Source\PSoC4/Clock_2.c **** *
 187:.\Generated_Source\PSoC4/Clock_2.c **** * Summary:
 188:.\Generated_Source\PSoC4/Clock_2.c **** *  Gets the clock fractional divider register value.
 189:.\Generated_Source\PSoC4/Clock_2.c **** *
 190:.\Generated_Source\PSoC4/Clock_2.c **** * Parameters:
 191:.\Generated_Source\PSoC4/Clock_2.c **** *  None
 192:.\Generated_Source\PSoC4/Clock_2.c **** *
 193:.\Generated_Source\PSoC4/Clock_2.c **** * Returns:
 194:.\Generated_Source\PSoC4/Clock_2.c **** *  Fractional Divide value of the clock
 195:.\Generated_Source\PSoC4/Clock_2.c **** *  0 if the fractional divider is not in use.
 196:.\Generated_Source\PSoC4/Clock_2.c **** *
 197:.\Generated_Source\PSoC4/Clock_2.c **** *******************************************************************************/
 198:.\Generated_Source\PSoC4/Clock_2.c **** uint8 Clock_2_GetFractionalDividerRegister(void)
 199:.\Generated_Source\PSoC4/Clock_2.c **** {
 212              		.loc 1 199 0
 213              		.cfi_startproc
 214 0000 80B5     		push	{r7, lr}
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 00AF     		add	r7, sp, #0
 219              		.cfi_def_cfa_register 7
 200:.\Generated_Source\PSoC4/Clock_2.c **** #if defined (Clock_2__FRAC_MASK)
 201:.\Generated_Source\PSoC4/Clock_2.c ****     /* return fractional divider bits */
 202:.\Generated_Source\PSoC4/Clock_2.c ****     return (uint8)((Clock_2_DIV_REG & Clock_2_DIV_FRAC_MASK)
 220              		.loc 1 202 0
 221 0004 044B     		ldr	r3, .L18
 222 0006 1A68     		ldr	r2, [r3]
 223 0008 F823     		mov	r3, #248
 224 000a 1340     		and	r3, r2
 203:.\Generated_Source\PSoC4/Clock_2.c ****         >> Clock_2_DIV_FRAC_SHIFT);
 225              		.loc 1 203 0
 226 000c DB08     		lsr	r3, r3, #3
 202:.\Generated_Source\PSoC4/Clock_2.c ****     return (uint8)((Clock_2_DIV_REG & Clock_2_DIV_FRAC_MASK)
 227              		.loc 1 202 0
 228 000e DBB2     		uxtb	r3, r3
 204:.\Generated_Source\PSoC4/Clock_2.c **** #else
 205:.\Generated_Source\PSoC4/Clock_2.c ****     return 0u;
 206:.\Generated_Source\PSoC4/Clock_2.c **** #endif /* Clock_2__FRAC_MASK */
 207:.\Generated_Source\PSoC4/Clock_2.c **** }
 229              		.loc 1 207 0
 230 0010 181C     		mov	r0, r3
 231 0012 BD46     		mov	sp, r7
 232              		@ sp needed
 233 0014 80BD     		pop	{r7, pc}
 234              	.L19:
 235 0016 C046     		.align	2
 236              	.L18:
 237 0018 00040140 		.word	1073808384
 238              		.cfi_endproc
 239              	.LFE4:
 240              		.size	Clock_2_GetFractionalDividerRegister, .-Clock_2_GetFractionalDividerRegister
 241              		.text
 242              	.Letext0:
 243              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 244              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 9


 245              	.Ldebug_info0:
 246 0000 5C010000 		.4byte	0x15c
 247 0004 0400     		.2byte	0x4
 248 0006 00000000 		.4byte	.Ldebug_abbrev0
 249 000a 04       		.byte	0x4
 250 000b 01       		.uleb128 0x1
 251 000c 2E010000 		.4byte	.LASF25
 252 0010 01       		.byte	0x1
 253 0011 CD010000 		.4byte	.LASF26
 254 0015 21000000 		.4byte	.LASF27
 255 0019 00000000 		.4byte	.Ldebug_ranges0+0
 256 001d 00000000 		.4byte	0
 257 0021 00000000 		.4byte	.Ldebug_line0
 258 0025 02       		.uleb128 0x2
 259 0026 01       		.byte	0x1
 260 0027 06       		.byte	0x6
 261 0028 09020000 		.4byte	.LASF0
 262 002c 02       		.uleb128 0x2
 263 002d 01       		.byte	0x1
 264 002e 08       		.byte	0x8
 265 002f 88000000 		.4byte	.LASF1
 266 0033 02       		.uleb128 0x2
 267 0034 02       		.byte	0x2
 268 0035 05       		.byte	0x5
 269 0036 F0010000 		.4byte	.LASF2
 270 003a 02       		.uleb128 0x2
 271 003b 02       		.byte	0x2
 272 003c 07       		.byte	0x7
 273 003d A8000000 		.4byte	.LASF3
 274 0041 02       		.uleb128 0x2
 275 0042 04       		.byte	0x4
 276 0043 05       		.byte	0x5
 277 0044 00020000 		.4byte	.LASF4
 278 0048 02       		.uleb128 0x2
 279 0049 04       		.byte	0x4
 280 004a 07       		.byte	0x7
 281 004b 96000000 		.4byte	.LASF5
 282 004f 02       		.uleb128 0x2
 283 0050 08       		.byte	0x8
 284 0051 05       		.byte	0x5
 285 0052 BA010000 		.4byte	.LASF6
 286 0056 02       		.uleb128 0x2
 287 0057 08       		.byte	0x8
 288 0058 07       		.byte	0x7
 289 0059 30020000 		.4byte	.LASF7
 290 005d 03       		.uleb128 0x3
 291 005e 04       		.byte	0x4
 292 005f 05       		.byte	0x5
 293 0060 696E7400 		.ascii	"int\000"
 294 0064 02       		.uleb128 0x2
 295 0065 04       		.byte	0x4
 296 0066 07       		.byte	0x7
 297 0067 FC000000 		.4byte	.LASF8
 298 006b 04       		.uleb128 0x4
 299 006c FA010000 		.4byte	.LASF9
 300 0070 02       		.byte	0x2
 301 0071 A1       		.byte	0xa1
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 10


 302 0072 2C000000 		.4byte	0x2c
 303 0076 04       		.uleb128 0x4
 304 0077 EE000000 		.4byte	.LASF10
 305 007b 02       		.byte	0x2
 306 007c A2       		.byte	0xa2
 307 007d 3A000000 		.4byte	0x3a
 308 0081 04       		.uleb128 0x4
 309 0082 F5000000 		.4byte	.LASF11
 310 0086 02       		.byte	0x2
 311 0087 A3       		.byte	0xa3
 312 0088 48000000 		.4byte	0x48
 313 008c 02       		.uleb128 0x2
 314 008d 04       		.byte	0x4
 315 008e 04       		.byte	0x4
 316 008f 1B000000 		.4byte	.LASF12
 317 0093 02       		.uleb128 0x2
 318 0094 08       		.byte	0x8
 319 0095 04       		.byte	0x4
 320 0096 C6000000 		.4byte	.LASF13
 321 009a 02       		.uleb128 0x2
 322 009b 01       		.byte	0x1
 323 009c 08       		.byte	0x8
 324 009d C8010000 		.4byte	.LASF14
 325 00a1 05       		.uleb128 0x5
 326 00a2 0D000000 		.4byte	.LASF15
 327 00a6 02       		.byte	0x2
 328 00a7 4D01     		.2byte	0x14d
 329 00a9 AD000000 		.4byte	0xad
 330 00ad 06       		.uleb128 0x6
 331 00ae 81000000 		.4byte	0x81
 332 00b2 07       		.uleb128 0x7
 333 00b3 AA010000 		.4byte	.LASF16
 334 00b7 01       		.byte	0x1
 335 00b8 27       		.byte	0x27
 336 00b9 00000000 		.4byte	.LFB0
 337 00bd 2C000000 		.4byte	.LFE0-.LFB0
 338 00c1 01       		.uleb128 0x1
 339 00c2 9C       		.byte	0x9c
 340 00c3 D6000000 		.4byte	0xd6
 341 00c7 08       		.uleb128 0x8
 342 00c8 D4000000 		.4byte	.LASF18
 343 00cc 01       		.byte	0x1
 344 00cd 27       		.byte	0x27
 345 00ce 81000000 		.4byte	0x81
 346 00d2 02       		.uleb128 0x2
 347 00d3 91       		.byte	0x91
 348 00d4 74       		.sleb128 -12
 349 00d5 00       		.byte	0
 350 00d6 09       		.uleb128 0x9
 351 00d7 00000000 		.4byte	.LASF28
 352 00db 01       		.byte	0x1
 353 00dc 5F       		.byte	0x5f
 354 00dd 00000000 		.4byte	.LFB1
 355 00e1 20000000 		.4byte	.LFE1-.LFB1
 356 00e5 01       		.uleb128 0x1
 357 00e6 9C       		.byte	0x9c
 358 00e7 07       		.uleb128 0x7
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 11


 359 00e8 09010000 		.4byte	.LASF17
 360 00ec 01       		.byte	0x1
 361 00ed 86       		.byte	0x86
 362 00ee 00000000 		.4byte	.LFB2
 363 00f2 44000000 		.4byte	.LFE2-.LFB2
 364 00f6 01       		.uleb128 0x1
 365 00f7 9C       		.byte	0x9c
 366 00f8 35010000 		.4byte	0x135
 367 00fc 08       		.uleb128 0x8
 368 00fd BB000000 		.4byte	.LASF19
 369 0101 01       		.byte	0x1
 370 0102 86       		.byte	0x86
 371 0103 76000000 		.4byte	0x76
 372 0107 02       		.uleb128 0x2
 373 0108 91       		.byte	0x91
 374 0109 6E       		.sleb128 -18
 375 010a 08       		.uleb128 0x8
 376 010b E0000000 		.4byte	.LASF20
 377 010f 01       		.byte	0x1
 378 0110 86       		.byte	0x86
 379 0111 6B000000 		.4byte	0x6b
 380 0115 02       		.uleb128 0x2
 381 0116 91       		.byte	0x91
 382 0117 6D       		.sleb128 -19
 383 0118 0A       		.uleb128 0xa
 384 0119 13000000 		.4byte	.LASF21
 385 011d 01       		.byte	0x1
 386 011e 88       		.byte	0x88
 387 011f 81000000 		.4byte	0x81
 388 0123 02       		.uleb128 0x2
 389 0124 91       		.byte	0x91
 390 0125 74       		.sleb128 -12
 391 0126 0A       		.uleb128 0xa
 392 0127 CD000000 		.4byte	.LASF22
 393 012b 01       		.byte	0x1
 394 012c 89       		.byte	0x89
 395 012d 81000000 		.4byte	0x81
 396 0131 02       		.uleb128 0x2
 397 0132 91       		.byte	0x91
 398 0133 70       		.sleb128 -16
 399 0134 00       		.byte	0
 400 0135 0B       		.uleb128 0xb
 401 0136 15020000 		.4byte	.LASF23
 402 013a 01       		.byte	0x1
 403 013b B0       		.byte	0xb0
 404 013c 76000000 		.4byte	0x76
 405 0140 00000000 		.4byte	.LFB3
 406 0144 18000000 		.4byte	.LFE3-.LFB3
 407 0148 01       		.uleb128 0x1
 408 0149 9C       		.byte	0x9c
 409 014a 0B       		.uleb128 0xb
 410 014b 63000000 		.4byte	.LASF24
 411 014f 01       		.byte	0x1
 412 0150 C6       		.byte	0xc6
 413 0151 6B000000 		.4byte	0x6b
 414 0155 00000000 		.4byte	.LFB4
 415 0159 1C000000 		.4byte	.LFE4-.LFB4
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 12


 416 015d 01       		.uleb128 0x1
 417 015e 9C       		.byte	0x9c
 418 015f 00       		.byte	0
 419              		.section	.debug_abbrev,"",%progbits
 420              	.Ldebug_abbrev0:
 421 0000 01       		.uleb128 0x1
 422 0001 11       		.uleb128 0x11
 423 0002 01       		.byte	0x1
 424 0003 25       		.uleb128 0x25
 425 0004 0E       		.uleb128 0xe
 426 0005 13       		.uleb128 0x13
 427 0006 0B       		.uleb128 0xb
 428 0007 03       		.uleb128 0x3
 429 0008 0E       		.uleb128 0xe
 430 0009 1B       		.uleb128 0x1b
 431 000a 0E       		.uleb128 0xe
 432 000b 55       		.uleb128 0x55
 433 000c 17       		.uleb128 0x17
 434 000d 11       		.uleb128 0x11
 435 000e 01       		.uleb128 0x1
 436 000f 10       		.uleb128 0x10
 437 0010 17       		.uleb128 0x17
 438 0011 00       		.byte	0
 439 0012 00       		.byte	0
 440 0013 02       		.uleb128 0x2
 441 0014 24       		.uleb128 0x24
 442 0015 00       		.byte	0
 443 0016 0B       		.uleb128 0xb
 444 0017 0B       		.uleb128 0xb
 445 0018 3E       		.uleb128 0x3e
 446 0019 0B       		.uleb128 0xb
 447 001a 03       		.uleb128 0x3
 448 001b 0E       		.uleb128 0xe
 449 001c 00       		.byte	0
 450 001d 00       		.byte	0
 451 001e 03       		.uleb128 0x3
 452 001f 24       		.uleb128 0x24
 453 0020 00       		.byte	0
 454 0021 0B       		.uleb128 0xb
 455 0022 0B       		.uleb128 0xb
 456 0023 3E       		.uleb128 0x3e
 457 0024 0B       		.uleb128 0xb
 458 0025 03       		.uleb128 0x3
 459 0026 08       		.uleb128 0x8
 460 0027 00       		.byte	0
 461 0028 00       		.byte	0
 462 0029 04       		.uleb128 0x4
 463 002a 16       		.uleb128 0x16
 464 002b 00       		.byte	0
 465 002c 03       		.uleb128 0x3
 466 002d 0E       		.uleb128 0xe
 467 002e 3A       		.uleb128 0x3a
 468 002f 0B       		.uleb128 0xb
 469 0030 3B       		.uleb128 0x3b
 470 0031 0B       		.uleb128 0xb
 471 0032 49       		.uleb128 0x49
 472 0033 13       		.uleb128 0x13
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 13


 473 0034 00       		.byte	0
 474 0035 00       		.byte	0
 475 0036 05       		.uleb128 0x5
 476 0037 16       		.uleb128 0x16
 477 0038 00       		.byte	0
 478 0039 03       		.uleb128 0x3
 479 003a 0E       		.uleb128 0xe
 480 003b 3A       		.uleb128 0x3a
 481 003c 0B       		.uleb128 0xb
 482 003d 3B       		.uleb128 0x3b
 483 003e 05       		.uleb128 0x5
 484 003f 49       		.uleb128 0x49
 485 0040 13       		.uleb128 0x13
 486 0041 00       		.byte	0
 487 0042 00       		.byte	0
 488 0043 06       		.uleb128 0x6
 489 0044 35       		.uleb128 0x35
 490 0045 00       		.byte	0
 491 0046 49       		.uleb128 0x49
 492 0047 13       		.uleb128 0x13
 493 0048 00       		.byte	0
 494 0049 00       		.byte	0
 495 004a 07       		.uleb128 0x7
 496 004b 2E       		.uleb128 0x2e
 497 004c 01       		.byte	0x1
 498 004d 3F       		.uleb128 0x3f
 499 004e 19       		.uleb128 0x19
 500 004f 03       		.uleb128 0x3
 501 0050 0E       		.uleb128 0xe
 502 0051 3A       		.uleb128 0x3a
 503 0052 0B       		.uleb128 0xb
 504 0053 3B       		.uleb128 0x3b
 505 0054 0B       		.uleb128 0xb
 506 0055 27       		.uleb128 0x27
 507 0056 19       		.uleb128 0x19
 508 0057 11       		.uleb128 0x11
 509 0058 01       		.uleb128 0x1
 510 0059 12       		.uleb128 0x12
 511 005a 06       		.uleb128 0x6
 512 005b 40       		.uleb128 0x40
 513 005c 18       		.uleb128 0x18
 514 005d 9742     		.uleb128 0x2117
 515 005f 19       		.uleb128 0x19
 516 0060 01       		.uleb128 0x1
 517 0061 13       		.uleb128 0x13
 518 0062 00       		.byte	0
 519 0063 00       		.byte	0
 520 0064 08       		.uleb128 0x8
 521 0065 05       		.uleb128 0x5
 522 0066 00       		.byte	0
 523 0067 03       		.uleb128 0x3
 524 0068 0E       		.uleb128 0xe
 525 0069 3A       		.uleb128 0x3a
 526 006a 0B       		.uleb128 0xb
 527 006b 3B       		.uleb128 0x3b
 528 006c 0B       		.uleb128 0xb
 529 006d 49       		.uleb128 0x49
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 14


 530 006e 13       		.uleb128 0x13
 531 006f 02       		.uleb128 0x2
 532 0070 18       		.uleb128 0x18
 533 0071 00       		.byte	0
 534 0072 00       		.byte	0
 535 0073 09       		.uleb128 0x9
 536 0074 2E       		.uleb128 0x2e
 537 0075 00       		.byte	0
 538 0076 3F       		.uleb128 0x3f
 539 0077 19       		.uleb128 0x19
 540 0078 03       		.uleb128 0x3
 541 0079 0E       		.uleb128 0xe
 542 007a 3A       		.uleb128 0x3a
 543 007b 0B       		.uleb128 0xb
 544 007c 3B       		.uleb128 0x3b
 545 007d 0B       		.uleb128 0xb
 546 007e 27       		.uleb128 0x27
 547 007f 19       		.uleb128 0x19
 548 0080 11       		.uleb128 0x11
 549 0081 01       		.uleb128 0x1
 550 0082 12       		.uleb128 0x12
 551 0083 06       		.uleb128 0x6
 552 0084 40       		.uleb128 0x40
 553 0085 18       		.uleb128 0x18
 554 0086 9742     		.uleb128 0x2117
 555 0088 19       		.uleb128 0x19
 556 0089 00       		.byte	0
 557 008a 00       		.byte	0
 558 008b 0A       		.uleb128 0xa
 559 008c 34       		.uleb128 0x34
 560 008d 00       		.byte	0
 561 008e 03       		.uleb128 0x3
 562 008f 0E       		.uleb128 0xe
 563 0090 3A       		.uleb128 0x3a
 564 0091 0B       		.uleb128 0xb
 565 0092 3B       		.uleb128 0x3b
 566 0093 0B       		.uleb128 0xb
 567 0094 49       		.uleb128 0x49
 568 0095 13       		.uleb128 0x13
 569 0096 02       		.uleb128 0x2
 570 0097 18       		.uleb128 0x18
 571 0098 00       		.byte	0
 572 0099 00       		.byte	0
 573 009a 0B       		.uleb128 0xb
 574 009b 2E       		.uleb128 0x2e
 575 009c 00       		.byte	0
 576 009d 3F       		.uleb128 0x3f
 577 009e 19       		.uleb128 0x19
 578 009f 03       		.uleb128 0x3
 579 00a0 0E       		.uleb128 0xe
 580 00a1 3A       		.uleb128 0x3a
 581 00a2 0B       		.uleb128 0xb
 582 00a3 3B       		.uleb128 0x3b
 583 00a4 0B       		.uleb128 0xb
 584 00a5 27       		.uleb128 0x27
 585 00a6 19       		.uleb128 0x19
 586 00a7 49       		.uleb128 0x49
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 15


 587 00a8 13       		.uleb128 0x13
 588 00a9 11       		.uleb128 0x11
 589 00aa 01       		.uleb128 0x1
 590 00ab 12       		.uleb128 0x12
 591 00ac 06       		.uleb128 0x6
 592 00ad 40       		.uleb128 0x40
 593 00ae 18       		.uleb128 0x18
 594 00af 9742     		.uleb128 0x2117
 595 00b1 19       		.uleb128 0x19
 596 00b2 00       		.byte	0
 597 00b3 00       		.byte	0
 598 00b4 00       		.byte	0
 599              		.section	.debug_aranges,"",%progbits
 600 0000 3C000000 		.4byte	0x3c
 601 0004 0200     		.2byte	0x2
 602 0006 00000000 		.4byte	.Ldebug_info0
 603 000a 04       		.byte	0x4
 604 000b 00       		.byte	0
 605 000c 0000     		.2byte	0
 606 000e 0000     		.2byte	0
 607 0010 00000000 		.4byte	.LFB0
 608 0014 2C000000 		.4byte	.LFE0-.LFB0
 609 0018 00000000 		.4byte	.LFB1
 610 001c 20000000 		.4byte	.LFE1-.LFB1
 611 0020 00000000 		.4byte	.LFB2
 612 0024 44000000 		.4byte	.LFE2-.LFB2
 613 0028 00000000 		.4byte	.LFB3
 614 002c 18000000 		.4byte	.LFE3-.LFB3
 615 0030 00000000 		.4byte	.LFB4
 616 0034 1C000000 		.4byte	.LFE4-.LFB4
 617 0038 00000000 		.4byte	0
 618 003c 00000000 		.4byte	0
 619              		.section	.debug_ranges,"",%progbits
 620              	.Ldebug_ranges0:
 621 0000 00000000 		.4byte	.LFB0
 622 0004 2C000000 		.4byte	.LFE0
 623 0008 00000000 		.4byte	.LFB1
 624 000c 20000000 		.4byte	.LFE1
 625 0010 00000000 		.4byte	.LFB2
 626 0014 44000000 		.4byte	.LFE2
 627 0018 00000000 		.4byte	.LFB3
 628 001c 18000000 		.4byte	.LFE3
 629 0020 00000000 		.4byte	.LFB4
 630 0024 1C000000 		.4byte	.LFE4
 631 0028 00000000 		.4byte	0
 632 002c 00000000 		.4byte	0
 633              		.section	.debug_line,"",%progbits
 634              	.Ldebug_line0:
 635 0000 C4000000 		.section	.debug_str,"MS",%progbits,1
 635      02004600 
 635      00000201 
 635      FB0E0D00 
 635      01010101 
 636              	.LASF28:
 637 0000 436C6F63 		.ascii	"Clock_2_Stop\000"
 637      6B5F325F 
 637      53746F70 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 16


 637      00
 638              	.LASF15:
 639 000d 72656733 		.ascii	"reg32\000"
 639      3200
 640              	.LASF21:
 641 0013 6D61736B 		.ascii	"maskVal\000"
 641      56616C00 
 642              	.LASF12:
 643 001b 666C6F61 		.ascii	"float\000"
 643      7400
 644              	.LASF27:
 645 0021 433A5C55 		.ascii	"C:\\Users\\mliha\\Documents\\Lab_3_Embedded\\BLE La"
 645      73657273 
 645      5C6D6C69 
 645      68615C44 
 645      6F63756D 
 646 004f 6220335C 		.ascii	"b 3\\BLE Lab 3.cydsn\000"
 646      424C4520 
 646      4C616220 
 646      332E6379 
 646      64736E00 
 647              	.LASF24:
 648 0063 436C6F63 		.ascii	"Clock_2_GetFractionalDividerRegister\000"
 648      6B5F325F 
 648      47657446 
 648      72616374 
 648      696F6E61 
 649              	.LASF1:
 650 0088 756E7369 		.ascii	"unsigned char\000"
 650      676E6564 
 650      20636861 
 650      7200
 651              	.LASF5:
 652 0096 6C6F6E67 		.ascii	"long unsigned int\000"
 652      20756E73 
 652      69676E65 
 652      6420696E 
 652      7400
 653              	.LASF3:
 654 00a8 73686F72 		.ascii	"short unsigned int\000"
 654      7420756E 
 654      7369676E 
 654      65642069 
 654      6E7400
 655              	.LASF19:
 656 00bb 636C6B44 		.ascii	"clkDivider\000"
 656      69766964 
 656      657200
 657              	.LASF13:
 658 00c6 646F7562 		.ascii	"double\000"
 658      6C6500
 659              	.LASF22:
 660 00cd 72656756 		.ascii	"regVal\000"
 660      616C00
 661              	.LASF18:
 662 00d4 616C6967 		.ascii	"alignClkDiv\000"
 662      6E436C6B 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 17


 662      44697600 
 663              	.LASF20:
 664 00e0 636C6B46 		.ascii	"clkFractional\000"
 664      72616374 
 664      696F6E61 
 664      6C00
 665              	.LASF10:
 666 00ee 75696E74 		.ascii	"uint16\000"
 666      313600
 667              	.LASF11:
 668 00f5 75696E74 		.ascii	"uint32\000"
 668      333200
 669              	.LASF8:
 670 00fc 756E7369 		.ascii	"unsigned int\000"
 670      676E6564 
 670      20696E74 
 670      00
 671              	.LASF17:
 672 0109 436C6F63 		.ascii	"Clock_2_SetFractionalDividerRegister\000"
 672      6B5F325F 
 672      53657446 
 672      72616374 
 672      696F6E61 
 673              	.LASF25:
 674 012e 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 674      4320342E 
 674      382E3420 
 674      32303134 
 674      30353236 
 675 0161 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 675      20726576 
 675      6973696F 
 675      6E203231 
 675      31333538 
 676 0194 30202D66 		.ascii	"0 -ffunction-sections\000"
 676      66756E63 
 676      74696F6E 
 676      2D736563 
 676      74696F6E 
 677              	.LASF16:
 678 01aa 436C6F63 		.ascii	"Clock_2_StartEx\000"
 678      6B5F325F 
 678      53746172 
 678      74457800 
 679              	.LASF6:
 680 01ba 6C6F6E67 		.ascii	"long long int\000"
 680      206C6F6E 
 680      6720696E 
 680      7400
 681              	.LASF14:
 682 01c8 63686172 		.ascii	"char\000"
 682      00
 683              	.LASF26:
 684 01cd 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\Clock_2.c\000"
 684      6E657261 
 684      7465645F 
 684      536F7572 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccAnFx8h.s 			page 18


 684      63655C50 
 685              	.LASF2:
 686 01f0 73686F72 		.ascii	"short int\000"
 686      7420696E 
 686      7400
 687              	.LASF9:
 688 01fa 75696E74 		.ascii	"uint8\000"
 688      3800
 689              	.LASF4:
 690 0200 6C6F6E67 		.ascii	"long int\000"
 690      20696E74 
 690      00
 691              	.LASF0:
 692 0209 7369676E 		.ascii	"signed char\000"
 692      65642063 
 692      68617200 
 693              	.LASF23:
 694 0215 436C6F63 		.ascii	"Clock_2_GetDividerRegister\000"
 694      6B5F325F 
 694      47657444 
 694      69766964 
 694      65725265 
 695              	.LASF7:
 696 0230 6C6F6E67 		.ascii	"long long unsigned int\000"
 696      206C6F6E 
 696      6720756E 
 696      7369676E 
 696      65642069 
 697              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
