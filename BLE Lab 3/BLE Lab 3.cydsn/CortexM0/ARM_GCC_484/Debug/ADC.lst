ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 2


  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.section	.text.ADC_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_Init, %function
  79              	ADC_Init:
  80              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 4


  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  81              		.loc 1 95 0
  82              		.cfi_startproc
  83 0000 90B5     		push	{r4, r7, lr}
  84              		.cfi_def_cfa_offset 12
  85              		.cfi_offset 4, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 85B0     		sub	sp, sp, #20
  89              		.cfi_def_cfa_offset 32
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 5


 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  92              		.loc 1 140 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  96              		.loc 1 141 0
  97 000e 4F4B     		ldr	r3, .L15
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 101              		.loc 1 145 0
 102 0018 4D4B     		ldr	r3, .L15+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 105              		.loc 1 146 0
 106 001e 4D4B     		ldr	r3, .L15+8
 107 0020 4D4A     		ldr	r2, .L15+12
 108 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 109              		.loc 1 147 0
 110 0024 4D4B     		ldr	r3, .L15+16
 111 0026 4E4A     		ldr	r2, .L15+20
 112 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 113              		.loc 1 148 0
 114 002a 4E4B     		ldr	r3, .L15+24
 115 002c 4E4A     		ldr	r2, .L15+28
 116 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 117              		.loc 1 149 0
 118 0030 4E4B     		ldr	r3, .L15+32
 119 0032 0022     		mov	r2, #0
 120 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 121              		.loc 1 150 0
 122 0036 4E4B     		ldr	r3, .L15+36
 123 0038 4E4A     		ldr	r2, .L15+40
 124 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 125              		.loc 1 151 0
 126 003c 4E4B     		ldr	r3, .L15+44
 127 003e 4D4A     		ldr	r2, .L15+40
 128 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 129              		.loc 1 155 0
 130 0042 4E4B     		ldr	r3, .L15+48
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 6


 131 0044 4D4A     		ldr	r2, .L15+48
 132 0046 1268     		ldr	r2, [r2]
 133 0048 8021     		mov	r1, #128
 134 004a 4902     		lsl	r1, r1, #9
 135 004c 0A43     		orr	r2, r1
 136 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 137              		.loc 1 162 0
 138 0050 4B4B     		ldr	r3, .L15+52
 139 0052 0022     		mov	r2, #0
 140 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 141              		.loc 1 163 0
 142 0056 4B4B     		ldr	r3, .L15+56
 143 0058 0022     		mov	r2, #0
 144 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 145              		.loc 1 164 0
 146 005c 4A4B     		ldr	r3, .L15+60
 147 005e 0122     		mov	r2, #1
 148 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 149              		.loc 1 171 0
 150 0062 4A4B     		ldr	r3, .L15+64
 151 0064 1B68     		ldr	r3, [r3]
 152 0066 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 153              		.loc 1 172 0
 154 0068 7A68     		ldr	r2, [r7, #4]
 155 006a 494B     		ldr	r3, .L15+68
 156 006c 1340     		and	r3, r2
 157 006e 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 7


 158              		.loc 1 185 0
 159 0070 7B68     		ldr	r3, [r7, #4]
 160 0072 8022     		mov	r2, #128
 161 0074 9205     		lsl	r2, r2, #22
 162 0076 1343     		orr	r3, r2
 163 0078 7B60     		str	r3, [r7, #4]
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 164              		.loc 1 186 0
 165 007a 7B68     		ldr	r3, [r7, #4]
 166 007c 0122     		mov	r2, #1
 167 007e 9343     		bic	r3, r2
 168 0080 7B60     		str	r3, [r7, #4]
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 169              		.loc 1 191 0
 170 0082 424B     		ldr	r3, .L15+64
 171 0084 7A68     		ldr	r2, [r7, #4]
 172 0086 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 173              		.loc 1 197 0
 174 0088 0023     		mov	r3, #0
 175 008a FB60     		str	r3, [r7, #12]
 176 008c 58E0     		b	.L6
 177              	.L14:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 178              		.loc 1 199 0
 179 008e 0022     		mov	r2, #0
 180 0090 DC23     		mov	r3, #220
 181 0092 9B01     		lsl	r3, r3, #6
 182 0094 1340     		and	r3, r2
 183 0096 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 8


 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 184              		.loc 1 218 0
 185 0098 FB68     		ldr	r3, [r7, #12]
 186 009a 9B00     		lsl	r3, r3, #2
 187 009c 3D4A     		ldr	r2, .L15+72
 188 009e 9B18     		add	r3, r3, r2
 189 00a0 7A68     		ldr	r2, [r7, #4]
 190 00a2 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 191              		.loc 1 220 0
 192 00a4 0022     		mov	r2, #0
 193 00a6 0123     		mov	r3, #1
 194 00a8 1340     		and	r3, r2
 195 00aa 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 196              		.loc 1 222 0
 197 00ac 344B     		ldr	r3, .L15+52
 198 00ae 344A     		ldr	r2, .L15+52
 199 00b0 1168     		ldr	r1, [r2]
 200 00b2 FA68     		ldr	r2, [r7, #12]
 201 00b4 0120     		mov	r0, #1
 202 00b6 041C     		mov	r4, r0
 203 00b8 9440     		lsl	r4, r4, r2
 204 00ba 221C     		mov	r2, r4
 205 00bc 92B2     		uxth	r2, r2
 206 00be 0A43     		orr	r2, r1
 207 00c0 1A60     		str	r2, [r3]
 208              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 209              		.loc 1 225 0
 210 00c2 0022     		mov	r2, #0
 211 00c4 0223     		mov	r3, #2
 212 00c6 1340     		and	r3, r2
 213 00c8 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 214              		.loc 1 227 0
 215 00ca 2E4B     		ldr	r3, .L15+56
 216 00cc 2D4A     		ldr	r2, .L15+56
 217 00ce 1168     		ldr	r1, [r2]
 218 00d0 FA68     		ldr	r2, [r7, #12]
 219 00d2 0120     		mov	r0, #1
 220 00d4 041C     		mov	r4, r0
 221 00d6 9440     		lsl	r4, r4, r2
 222 00d8 221C     		mov	r2, r4
 223 00da 92B2     		uxth	r2, r2
 224 00dc 0A43     		orr	r2, r1
 225 00de 1A60     		str	r2, [r3]
 226              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 9


 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 227              		.loc 1 247 0
 228 00e0 0022     		mov	r2, #0
 229 00e2 8023     		mov	r3, #128
 230 00e4 9B00     		lsl	r3, r3, #2
 231 00e6 1340     		and	r3, r2
 232 00e8 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 233              		.loc 1 249 0
 234 00ea 8023     		mov	r3, #128
 235 00ec 5B00     		lsl	r3, r3, #1
 236 00ee BB60     		str	r3, [r7, #8]
 237 00f0 02E0     		b	.L10
 238              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 239              		.loc 1 253 0
 240 00f2 8023     		mov	r3, #128
 241 00f4 5B01     		lsl	r3, r3, #5
 242 00f6 BB60     		str	r3, [r7, #8]
 243              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 244              		.loc 1 256 0
 245 00f8 0022     		mov	r2, #0
 246 00fa 8023     		mov	r3, #128
 247 00fc 5B00     		lsl	r3, r3, #1
 248 00fe 1340     		and	r3, r2
 249 0100 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 250              		.loc 1 263 0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 10


 251 0102 254B     		ldr	r3, .L15+76
 252 0104 FA68     		ldr	r2, [r7, #12]
 253 0106 5200     		lsl	r2, r2, #1
 254 0108 0021     		mov	r1, #0
 255 010a D152     		strh	r1, [r2, r3]
 256 010c 04E0     		b	.L12
 257              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 258              		.loc 1 272 0
 259 010e 224B     		ldr	r3, .L15+76
 260 0110 FA68     		ldr	r2, [r7, #12]
 261 0112 5200     		lsl	r2, r2, #1
 262 0114 0021     		mov	r1, #0
 263 0116 D152     		strh	r1, [r2, r3]
 264              	.L12:
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 265              		.loc 1 276 0
 266 0118 BB68     		ldr	r3, [r7, #8]
 267 011a 204A     		ldr	r2, .L15+80
 268 011c 5343     		mul	r3, r2
 269 011e 8022     		mov	r2, #128
 270 0120 D200     		lsl	r2, r2, #3
 271 0122 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 272              		.loc 1 277 0
 273 0124 002B     		cmp	r3, #0
 274 0126 01DA     		bge	.L13
 275 0128 1D4C     		ldr	r4, .L15+84
 276 012a 1B19     		add	r3, r3, r4
 277              	.L13:
 278 012c DB12     		asr	r3, r3, #11
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 279              		.loc 1 276 0
 280 012e 9BB2     		uxth	r3, r3
 281 0130 19B2     		sxth	r1, r3
 282 0132 1C4B     		ldr	r3, .L15+88
 283 0134 FA68     		ldr	r2, [r7, #12]
 284 0136 9200     		lsl	r2, r2, #2
 285 0138 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 286              		.loc 1 197 0
 287 013a FB68     		ldr	r3, [r7, #12]
 288 013c 0133     		add	r3, r3, #1
 289 013e FB60     		str	r3, [r7, #12]
 290              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 11


 291              		.loc 1 197 0 is_stmt 0 discriminator 1
 292 0140 FB68     		ldr	r3, [r7, #12]
 293 0142 002B     		cmp	r3, #0
 294 0144 A3D0     		beq	.L14
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 295              		.loc 1 279 0 is_stmt 1
 296 0146 BD46     		mov	sp, r7
 297 0148 05B0     		add	sp, sp, #20
 298              		@ sp needed
 299 014a 90BD     		pop	{r4, r7, pc}
 300              	.L16:
 301              		.align	2
 302              	.L15:
 303 014c 00000000 		.word	ADC_ISR
 304 0150 20003A40 		.word	1077542944
 305 0154 00003A40 		.word	1077542912
 306 0158 C0020051 		.word	1358955200
 307 015c 04003A40 		.word	1077542916
 308 0160 8C000A80 		.word	-2146828148
 309 0164 18003A40 		.word	1077542936
 310 0168 0000FF07 		.word	134152192
 311 016c 1C003A40 		.word	1077542940
 312 0170 10003A40 		.word	1077542928
 313 0174 04000400 		.word	262148
 314 0178 14003A40 		.word	1077542932
 315 017c 00033A40 		.word	1077543680
 316 0180 28023A40 		.word	1077543464
 317 0184 38023A40 		.word	1077543480
 318 0188 18023A40 		.word	1077543448
 319 018c 30003A40 		.word	1077542960
 320 0190 FFFFFFDF 		.word	-536870913
 321 0194 80003A40 		.word	1077543040
 322 0198 00000000 		.word	ADC_offset
 323 019c 10270000 		.word	10000
 324 01a0 FF070000 		.word	2047
 325 01a4 00000000 		.word	ADC_countsPer10Volt
 326              		.cfi_endproc
 327              	.LFE3:
 328              		.size	ADC_Init, .-ADC_Init
 329              		.section	.text.ADC_Enable,"ax",%progbits
 330              		.align	2
 331              		.global	ADC_Enable
 332              		.code	16
 333              		.thumb_func
 334              		.type	ADC_Enable, %function
 335              	ADC_Enable:
 336              	.LFB4:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 12


 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 337              		.loc 1 296 0
 338              		.cfi_startproc
 339 0000 80B5     		push	{r7, lr}
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 7, -8
 342              		.cfi_offset 14, -4
 343 0002 00AF     		add	r7, sp, #0
 344              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 345              		.loc 1 297 0
 346 0004 0A4B     		ldr	r3, .L20
 347 0006 1B68     		ldr	r3, [r3]
 348 0008 002B     		cmp	r3, #0
 349 000a 0EDB     		blt	.L17
 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 350              		.loc 1 301 0
 351 000c C046     		mov	r8, r8
 352              	.L19:
 353              		.loc 1 301 0 is_stmt 0 discriminator 1
 354 000e 094B     		ldr	r3, .L20+4
 355 0010 1B68     		ldr	r3, [r3]
 356 0012 002B     		cmp	r3, #0
 357 0014 FBDB     		blt	.L19
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 358              		.loc 1 307 0 is_stmt 1
 359 0016 064B     		ldr	r3, .L20
 360 0018 054A     		ldr	r2, .L20
 361 001a 1268     		ldr	r2, [r2]
 362 001c 8021     		mov	r1, #128
 363 001e 0906     		lsl	r1, r1, #24
 364 0020 0A43     		orr	r2, r1
 365 0022 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 366              		.loc 1 310 0
 367 0024 0A20     		mov	r0, #10
 368 0026 FFF7FEFF 		bl	CyDelayUs
 369              	.L17:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 13


 370              		.loc 1 312 0
 371 002a BD46     		mov	sp, r7
 372              		@ sp needed
 373 002c 80BD     		pop	{r7, pc}
 374              	.L21:
 375 002e C046     		.align	2
 376              	.L20:
 377 0030 00003A40 		.word	1077542912
 378 0034 08023A40 		.word	1077543432
 379              		.cfi_endproc
 380              	.LFE4:
 381              		.size	ADC_Enable, .-ADC_Enable
 382              		.section	.text.ADC_Stop,"ax",%progbits
 383              		.align	2
 384              		.global	ADC_Stop
 385              		.code	16
 386              		.thumb_func
 387              		.type	ADC_Stop, %function
 388              	ADC_Stop:
 389              	.LFB5:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 390              		.loc 1 331 0
 391              		.cfi_startproc
 392 0000 80B5     		push	{r7, lr}
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 396 0002 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 398              		.loc 1 332 0
 399 0004 034B     		ldr	r3, .L23
 400 0006 034A     		ldr	r2, .L23
 401 0008 1268     		ldr	r2, [r2]
 402 000a 5200     		lsl	r2, r2, #1
 403 000c 5208     		lsr	r2, r2, #1
 404 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 405              		.loc 1 333 0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 14


 406 0010 BD46     		mov	sp, r7
 407              		@ sp needed
 408 0012 80BD     		pop	{r7, pc}
 409              	.L24:
 410              		.align	2
 411              	.L23:
 412 0014 00003A40 		.word	1077542912
 413              		.cfi_endproc
 414              	.LFE5:
 415              		.size	ADC_Stop, .-ADC_Stop
 416              		.section	.text.ADC_StartConvert,"ax",%progbits
 417              		.align	2
 418              		.global	ADC_StartConvert
 419              		.code	16
 420              		.thumb_func
 421              		.type	ADC_StartConvert, %function
 422              	ADC_StartConvert:
 423              	.LFB6:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 424              		.loc 1 357 0
 425              		.cfi_startproc
 426 0000 80B5     		push	{r7, lr}
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 432              		.loc 1 361 0
 433 0004 024B     		ldr	r3, .L26
 434 0006 0122     		mov	r2, #1
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 15


 435 0008 1A60     		str	r2, [r3]
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 436              		.loc 1 364 0
 437 000a BD46     		mov	sp, r7
 438              		@ sp needed
 439 000c 80BD     		pop	{r7, pc}
 440              	.L27:
 441 000e C046     		.align	2
 442              	.L26:
 443 0010 24003A40 		.word	1077542948
 444              		.cfi_endproc
 445              	.LFE6:
 446              		.size	ADC_StartConvert, .-ADC_StartConvert
 447              		.section	.text.ADC_StopConvert,"ax",%progbits
 448              		.align	2
 449              		.global	ADC_StopConvert
 450              		.code	16
 451              		.thumb_func
 452              		.type	ADC_StopConvert, %function
 453              	ADC_StopConvert:
 454              	.LFB7:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 455              		.loc 1 382 0
 456              		.cfi_startproc
 457 0000 80B5     		push	{r7, lr}
 458              		.cfi_def_cfa_offset 8
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 00AF     		add	r7, sp, #0
 462              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 463              		.loc 1 386 0
 464 0004 BD46     		mov	sp, r7
 465              		@ sp needed
 466 0006 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 16


 467              		.cfi_endproc
 468              	.LFE7:
 469              		.size	ADC_StopConvert, .-ADC_StopConvert
 470              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 471              		.align	2
 472              		.global	ADC_IsEndConversion
 473              		.code	16
 474              		.thumb_func
 475              		.type	ADC_IsEndConversion, %function
 476              	ADC_IsEndConversion:
 477              	.LFB8:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 478              		.loc 1 416 0
 479              		.cfi_startproc
 480 0000 80B5     		push	{r7, lr}
 481              		.cfi_def_cfa_offset 8
 482              		.cfi_offset 7, -8
 483              		.cfi_offset 14, -4
 484 0002 84B0     		sub	sp, sp, #16
 485              		.cfi_def_cfa_offset 24
 486 0004 00AF     		add	r7, sp, #0
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 489              		.loc 1 417 0
 490 0008 0023     		mov	r3, #0
 491 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 17


 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 492              		.loc 1 419 0
 493 000c 7A68     		ldr	r2, [r7, #4]
 494 000e 0323     		mov	r3, #3
 495 0010 1340     		and	r3, r2
 496 0012 11D0     		beq	.L30
 497              	.L32:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 498              		.loc 1 423 0 discriminator 1
 499 0014 0B4B     		ldr	r3, .L34
 500 0016 1A68     		ldr	r2, [r3]
 501 0018 0123     		mov	r3, #1
 502 001a 1340     		and	r3, r2
 503 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 504              		.loc 1 424 0 discriminator 1
 505 001e FB68     		ldr	r3, [r7, #12]
 506 0020 002B     		cmp	r3, #0
 507 0022 03D1     		bne	.L31
 508 0024 7A68     		ldr	r2, [r7, #4]
 509 0026 0223     		mov	r3, #2
 510 0028 1340     		and	r3, r2
 511 002a F3D1     		bne	.L32
 512              	.L31:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 513              		.loc 1 426 0
 514 002c FB68     		ldr	r3, [r7, #12]
 515 002e 002B     		cmp	r3, #0
 516 0030 02D0     		beq	.L30
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 517              		.loc 1 429 0
 518 0032 044B     		ldr	r3, .L34
 519 0034 0122     		mov	r2, #1
 520 0036 1A60     		str	r2, [r3]
 521              	.L30:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 18


 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 522              		.loc 1 450 0
 523 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 524              		.loc 1 451 0
 525 003a 181C     		mov	r0, r3
 526 003c BD46     		mov	sp, r7
 527 003e 04B0     		add	sp, sp, #16
 528              		@ sp needed
 529 0040 80BD     		pop	{r7, pc}
 530              	.L35:
 531 0042 C046     		.align	2
 532              	.L34:
 533 0044 10023A40 		.word	1077543440
 534              		.cfi_endproc
 535              	.LFE8:
 536              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 537              		.section	.text.ADC_GetResult16,"ax",%progbits
 538              		.align	2
 539              		.global	ADC_GetResult16
 540              		.code	16
 541              		.thumb_func
 542              		.type	ADC_GetResult16, %function
 543              	ADC_GetResult16:
 544              	.LFB9:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 545              		.loc 1 470 0
 546              		.cfi_startproc
 547 0000 80B5     		push	{r7, lr}
 548              		.cfi_def_cfa_offset 8
 549              		.cfi_offset 7, -8
 550              		.cfi_offset 14, -4
 551 0002 84B0     		sub	sp, sp, #16
 552              		.cfi_def_cfa_offset 24
 553 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 19


 554              		.cfi_def_cfa_register 7
 555 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 556              		.loc 1 474 0
 557 0008 7B68     		ldr	r3, [r7, #4]
 558 000a 002B     		cmp	r3, #0
 559 000c 02D0     		beq	.L37
 560              		.loc 1 474 0 is_stmt 0 discriminator 1
 561 000e 0020     		mov	r0, #0
 562 0010 FFF7FEFF 		bl	CyHalt
 563              	.L37:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 564              		.loc 1 476 0 is_stmt 1
 565 0014 7B68     		ldr	r3, [r7, #4]
 566 0016 002B     		cmp	r3, #0
 567 0018 08D1     		bne	.L38
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 568              		.loc 1 478 0
 569 001a 7B68     		ldr	r3, [r7, #4]
 570 001c 9B00     		lsl	r3, r3, #2
 571 001e 084A     		ldr	r2, .L41
 572 0020 9B18     		add	r3, r3, r2
 573 0022 1B68     		ldr	r3, [r3]
 574 0024 1B04     		lsl	r3, r3, #16
 575 0026 1B0C     		lsr	r3, r3, #16
 576 0028 FB60     		str	r3, [r7, #12]
 577 002a 01E0     		b	.L39
 578              	.L38:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 579              		.loc 1 486 0
 580 002c 0023     		mov	r3, #0
 581 002e FB60     		str	r3, [r7, #12]
 582              	.L39:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 583              		.loc 1 490 0
 584 0030 FB68     		ldr	r3, [r7, #12]
 585 0032 9BB2     		uxth	r3, r3
 586 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 587              		.loc 1 491 0
 588 0036 181C     		mov	r0, r3
 589 0038 BD46     		mov	sp, r7
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 20


 590 003a 04B0     		add	sp, sp, #16
 591              		@ sp needed
 592 003c 80BD     		pop	{r7, pc}
 593              	.L42:
 594 003e C046     		.align	2
 595              	.L41:
 596 0040 80013A40 		.word	1077543296
 597              		.cfi_endproc
 598              	.LFE9:
 599              		.size	ADC_GetResult16, .-ADC_GetResult16
 600              		.section	.text.ADC_SetChanMask,"ax",%progbits
 601              		.align	2
 602              		.global	ADC_SetChanMask
 603              		.code	16
 604              		.thumb_func
 605              		.type	ADC_SetChanMask, %function
 606              	ADC_SetChanMask:
 607              	.LFB10:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 608              		.loc 1 515 0
 609              		.cfi_startproc
 610 0000 80B5     		push	{r7, lr}
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 82B0     		sub	sp, sp, #8
 615              		.cfi_def_cfa_offset 16
 616 0004 00AF     		add	r7, sp, #0
 617              		.cfi_def_cfa_register 7
 618 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 619              		.loc 1 516 0
 620 0008 034B     		ldr	r3, .L44
 621 000a 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 21


 622 000c 0122     		mov	r2, #1
 623 000e 0A40     		and	r2, r1
 624 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 625              		.loc 1 517 0
 626 0012 BD46     		mov	sp, r7
 627 0014 02B0     		add	sp, sp, #8
 628              		@ sp needed
 629 0016 80BD     		pop	{r7, pc}
 630              	.L45:
 631              		.align	2
 632              	.L44:
 633 0018 20003A40 		.word	1077542944
 634              		.cfi_endproc
 635              	.LFE10:
 636              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 637              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 638              		.align	2
 639              		.global	ADC_SetLowLimit
 640              		.code	16
 641              		.thumb_func
 642              		.type	ADC_SetLowLimit, %function
 643              	ADC_SetLowLimit:
 644              	.LFB11:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 22


 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 645              		.loc 1 559 0
 646              		.cfi_startproc
 647 0000 80B5     		push	{r7, lr}
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 7, -8
 650              		.cfi_offset 14, -4
 651 0002 82B0     		sub	sp, sp, #8
 652              		.cfi_def_cfa_offset 16
 653 0004 00AF     		add	r7, sp, #0
 654              		.cfi_def_cfa_register 7
 655 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 656              		.loc 1 560 0
 657 0008 084B     		ldr	r3, .L47
 658 000a 084A     		ldr	r2, .L47
 659 000c 1268     		ldr	r2, [r2]
 660 000e 120C     		lsr	r2, r2, #16
 661 0010 1204     		lsl	r2, r2, #16
 662 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 663              		.loc 1 561 0
 664 0014 054B     		ldr	r3, .L47
 665 0016 054A     		ldr	r2, .L47
 666 0018 1168     		ldr	r1, [r2]
 667 001a 7A68     		ldr	r2, [r7, #4]
 668 001c 1204     		lsl	r2, r2, #16
 669 001e 120C     		lsr	r2, r2, #16
 670 0020 0A43     		orr	r2, r1
 671 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 672              		.loc 1 562 0
 673 0024 BD46     		mov	sp, r7
 674 0026 02B0     		add	sp, sp, #8
 675              		@ sp needed
 676 0028 80BD     		pop	{r7, pc}
 677              	.L48:
 678 002a C046     		.align	2
 679              	.L47:
 680 002c 18003A40 		.word	1077542936
 681              		.cfi_endproc
 682              	.LFE11:
 683              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 684              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 685              		.align	2
 686              		.global	ADC_SetHighLimit
 687              		.code	16
 688              		.thumb_func
 689              		.type	ADC_SetHighLimit, %function
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 23


 690              	ADC_SetHighLimit:
 691              	.LFB12:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 692              		.loc 1 580 0
 693              		.cfi_startproc
 694 0000 80B5     		push	{r7, lr}
 695              		.cfi_def_cfa_offset 8
 696              		.cfi_offset 7, -8
 697              		.cfi_offset 14, -4
 698 0002 82B0     		sub	sp, sp, #8
 699              		.cfi_def_cfa_offset 16
 700 0004 00AF     		add	r7, sp, #0
 701              		.cfi_def_cfa_register 7
 702 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 703              		.loc 1 581 0
 704 0008 074B     		ldr	r3, .L50
 705 000a 074A     		ldr	r2, .L50
 706 000c 1268     		ldr	r2, [r2]
 707 000e 1204     		lsl	r2, r2, #16
 708 0010 120C     		lsr	r2, r2, #16
 709 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 710              		.loc 1 582 0
 711 0014 044B     		ldr	r3, .L50
 712 0016 044A     		ldr	r2, .L50
 713 0018 1168     		ldr	r1, [r2]
 714 001a 7A68     		ldr	r2, [r7, #4]
 715 001c 1204     		lsl	r2, r2, #16
 716 001e 0A43     		orr	r2, r1
 717 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 718              		.loc 1 583 0
 719 0022 BD46     		mov	sp, r7
 720 0024 02B0     		add	sp, sp, #8
 721              		@ sp needed
 722 0026 80BD     		pop	{r7, pc}
 723              	.L51:
 724              		.align	2
 725              	.L50:
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 24


 726 0028 18003A40 		.word	1077542936
 727              		.cfi_endproc
 728              	.LFE12:
 729              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 730              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 731              		.align	2
 732              		.global	ADC_SetLimitMask
 733              		.code	16
 734              		.thumb_func
 735              		.type	ADC_SetLimitMask, %function
 736              	ADC_SetLimitMask:
 737              	.LFB13:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 738              		.loc 1 604 0
 739              		.cfi_startproc
 740 0000 80B5     		push	{r7, lr}
 741              		.cfi_def_cfa_offset 8
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 82B0     		sub	sp, sp, #8
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 749              		.loc 1 605 0
 750 0008 034B     		ldr	r3, .L53
 751 000a 7968     		ldr	r1, [r7, #4]
 752 000c 0122     		mov	r2, #1
 753 000e 0A40     		and	r2, r1
 754 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 755              		.loc 1 606 0
 756 0012 BD46     		mov	sp, r7
 757 0014 02B0     		add	sp, sp, #8
 758              		@ sp needed
 759 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 25


 760              	.L54:
 761              		.align	2
 762              	.L53:
 763 0018 38023A40 		.word	1077543480
 764              		.cfi_endproc
 765              	.LFE13:
 766              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 767              		.section	.text.ADC_SetSatMask,"ax",%progbits
 768              		.align	2
 769              		.global	ADC_SetSatMask
 770              		.code	16
 771              		.thumb_func
 772              		.type	ADC_SetSatMask, %function
 773              	ADC_SetSatMask:
 774              	.LFB14:
 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 775              		.loc 1 627 0
 776              		.cfi_startproc
 777 0000 80B5     		push	{r7, lr}
 778              		.cfi_def_cfa_offset 8
 779              		.cfi_offset 7, -8
 780              		.cfi_offset 14, -4
 781 0002 82B0     		sub	sp, sp, #8
 782              		.cfi_def_cfa_offset 16
 783 0004 00AF     		add	r7, sp, #0
 784              		.cfi_def_cfa_register 7
 785 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 786              		.loc 1 628 0
 787 0008 034B     		ldr	r3, .L56
 788 000a 7968     		ldr	r1, [r7, #4]
 789 000c 0122     		mov	r2, #1
 790 000e 0A40     		and	r2, r1
 791 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 792              		.loc 1 629 0
 793 0012 BD46     		mov	sp, r7
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 26


 794 0014 02B0     		add	sp, sp, #8
 795              		@ sp needed
 796 0016 80BD     		pop	{r7, pc}
 797              	.L57:
 798              		.align	2
 799              	.L56:
 800 0018 28023A40 		.word	1077543464
 801              		.cfi_endproc
 802              	.LFE14:
 803              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 804              		.section	.text.ADC_SetOffset,"ax",%progbits
 805              		.align	2
 806              		.global	ADC_SetOffset
 807              		.code	16
 808              		.thumb_func
 809              		.type	ADC_SetOffset, %function
 810              	ADC_SetOffset:
 811              	.LFB15:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 812              		.loc 1 655 0
 813              		.cfi_startproc
 814 0000 80B5     		push	{r7, lr}
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 82B0     		sub	sp, sp, #8
 819              		.cfi_def_cfa_offset 16
 820 0004 00AF     		add	r7, sp, #0
 821              		.cfi_def_cfa_register 7
 822 0006 7860     		str	r0, [r7, #4]
 823 0008 0A1C     		mov	r2, r1
 824 000a BB1C     		add	r3, r7, #2
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 27


 825 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 826              		.loc 1 657 0
 827 000e 7B68     		ldr	r3, [r7, #4]
 828 0010 002B     		cmp	r3, #0
 829 0012 02D0     		beq	.L59
 830              		.loc 1 657 0 is_stmt 0 discriminator 1
 831 0014 0020     		mov	r0, #0
 832 0016 FFF7FEFF 		bl	CyHalt
 833              	.L59:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 834              		.loc 1 659 0 is_stmt 1
 835 001a 044B     		ldr	r3, .L60
 836 001c 7A68     		ldr	r2, [r7, #4]
 837 001e 5200     		lsl	r2, r2, #1
 838 0020 B91C     		add	r1, r7, #2
 839 0022 0988     		ldrh	r1, [r1]
 840 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 841              		.loc 1 660 0
 842 0026 BD46     		mov	sp, r7
 843 0028 02B0     		add	sp, sp, #8
 844              		@ sp needed
 845 002a 80BD     		pop	{r7, pc}
 846              	.L61:
 847              		.align	2
 848              	.L60:
 849 002c 00000000 		.word	ADC_offset
 850              		.cfi_endproc
 851              	.LFE15:
 852              		.size	ADC_SetOffset, .-ADC_SetOffset
 853              		.section	.text.ADC_SetGain,"ax",%progbits
 854              		.align	2
 855              		.global	ADC_SetGain
 856              		.code	16
 857              		.thumb_func
 858              		.type	ADC_SetGain, %function
 859              	ADC_SetGain:
 860              	.LFB16:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 28


 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 861              		.loc 1 689 0
 862              		.cfi_startproc
 863 0000 80B5     		push	{r7, lr}
 864              		.cfi_def_cfa_offset 8
 865              		.cfi_offset 7, -8
 866              		.cfi_offset 14, -4
 867 0002 82B0     		sub	sp, sp, #8
 868              		.cfi_def_cfa_offset 16
 869 0004 00AF     		add	r7, sp, #0
 870              		.cfi_def_cfa_register 7
 871 0006 7860     		str	r0, [r7, #4]
 872 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 873              		.loc 1 691 0
 874 000a 7B68     		ldr	r3, [r7, #4]
 875 000c 002B     		cmp	r3, #0
 876 000e 02D0     		beq	.L63
 877              		.loc 1 691 0 is_stmt 0 discriminator 1
 878 0010 0020     		mov	r0, #0
 879 0012 FFF7FEFF 		bl	CyHalt
 880              	.L63:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 881              		.loc 1 693 0 is_stmt 1
 882 0016 044B     		ldr	r3, .L64
 883 0018 7A68     		ldr	r2, [r7, #4]
 884 001a 9200     		lsl	r2, r2, #2
 885 001c 3968     		ldr	r1, [r7]
 886 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 887              		.loc 1 694 0
 888 0020 BD46     		mov	sp, r7
 889 0022 02B0     		add	sp, sp, #8
 890              		@ sp needed
 891 0024 80BD     		pop	{r7, pc}
 892              	.L65:
 893 0026 C046     		.align	2
 894              	.L64:
 895 0028 00000000 		.word	ADC_countsPer10Volt
 896              		.cfi_endproc
 897              	.LFE16:
 898              		.size	ADC_SetGain, .-ADC_SetGain
 899              		.global	__aeabi_idiv
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 29


 900              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 901              		.align	2
 902              		.global	ADC_CountsTo_mVolts
 903              		.code	16
 904              		.thumb_func
 905              		.type	ADC_CountsTo_mVolts, %function
 906              	ADC_CountsTo_mVolts:
 907              	.LFB17:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 908              		.loc 1 722 0
 909              		.cfi_startproc
 910 0000 80B5     		push	{r7, lr}
 911              		.cfi_def_cfa_offset 8
 912              		.cfi_offset 7, -8
 913              		.cfi_offset 14, -4
 914 0002 84B0     		sub	sp, sp, #16
 915              		.cfi_def_cfa_offset 24
 916 0004 00AF     		add	r7, sp, #0
 917              		.cfi_def_cfa_register 7
 918 0006 7860     		str	r0, [r7, #4]
 919 0008 0A1C     		mov	r2, r1
 920 000a BB1C     		add	r3, r7, #2
 921 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 922              		.loc 1 726 0
 923 000e 7B68     		ldr	r3, [r7, #4]
 924 0010 002B     		cmp	r3, #0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 30


 925 0012 02D0     		beq	.L67
 926              		.loc 1 726 0 is_stmt 0 discriminator 1
 927 0014 0020     		mov	r0, #0
 928 0016 FFF7FEFF 		bl	CyHalt
 929              	.L67:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 930              		.loc 1 737 0 is_stmt 1
 931 001a BB1C     		add	r3, r7, #2
 932 001c 1A88     		ldrh	r2, [r3]
 933 001e 1E4B     		ldr	r3, .L73
 934 0020 7968     		ldr	r1, [r7, #4]
 935 0022 4900     		lsl	r1, r1, #1
 936 0024 CB5A     		ldrh	r3, [r1, r3]
 937 0026 9BB2     		uxth	r3, r3
 938 0028 9BB2     		uxth	r3, r3
 939 002a D31A     		sub	r3, r2, r3
 940 002c 9AB2     		uxth	r2, r3
 941 002e BB1C     		add	r3, r7, #2
 942 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 943              		.loc 1 739 0
 944 0032 BB1C     		add	r3, r7, #2
 945 0034 0021     		mov	r1, #0
 946 0036 5B5E     		ldrsh	r3, [r3, r1]
 947 0038 184A     		ldr	r2, .L73+4
 948 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 949              		.loc 1 740 0
 950 003c BB1C     		add	r3, r7, #2
 951 003e 0021     		mov	r1, #0
 952 0040 5B5E     		ldrsh	r3, [r3, r1]
 953 0042 002B     		cmp	r3, #0
 954 0044 08DD     		ble	.L68
 955              		.loc 1 740 0 is_stmt 0 discriminator 1
 956 0046 164B     		ldr	r3, .L73+8
 957 0048 7968     		ldr	r1, [r7, #4]
 958 004a 8900     		lsl	r1, r1, #2
 959 004c CB58     		ldr	r3, [r1, r3]
 960 004e 002B     		cmp	r3, #0
 961 0050 00DA     		bge	.L69
 962 0052 0133     		add	r3, r3, #1
 963              	.L69:
 964 0054 5B10     		asr	r3, r3, #1
 965 0056 08E0     		b	.L70
 966              	.L68:
 967              		.loc 1 740 0 discriminator 2
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 31


 968 0058 114B     		ldr	r3, .L73+8
 969 005a 7968     		ldr	r1, [r7, #4]
 970 005c 8900     		lsl	r1, r1, #2
 971 005e CB58     		ldr	r3, [r1, r3]
 972 0060 002B     		cmp	r3, #0
 973 0062 00DA     		bge	.L71
 974 0064 0133     		add	r3, r3, #1
 975              	.L71:
 976 0066 5B10     		asr	r3, r3, #1
 977 0068 5B42     		neg	r3, r3
 978              	.L70:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 979              		.loc 1 739 0 is_stmt 1
 980 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 981              		.loc 1 741 0
 982 006c 0C4B     		ldr	r3, .L73+8
 983 006e 7968     		ldr	r1, [r7, #4]
 984 0070 8900     		lsl	r1, r1, #2
 985 0072 CB58     		ldr	r3, [r1, r3]
 986 0074 101C     		mov	r0, r2
 987 0076 191C     		mov	r1, r3
 988 0078 FFF7FEFF 		bl	__aeabi_idiv
 989 007c 031C     		mov	r3, r0
 990 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 991              		.loc 1 739 0
 992 0080 3B1C     		mov	r3, r7
 993 0082 0E33     		add	r3, r3, #14
 994 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 995              		.loc 1 743 0
 996 0086 3B1C     		mov	r3, r7
 997 0088 0E33     		add	r3, r3, #14
 998 008a 1B88     		ldrh	r3, [r3]
 999 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1000              		.loc 1 744 0
 1001 008e 181C     		mov	r0, r3
 1002 0090 BD46     		mov	sp, r7
 1003 0092 04B0     		add	sp, sp, #16
 1004              		@ sp needed
 1005 0094 80BD     		pop	{r7, pc}
 1006              	.L74:
 1007 0096 C046     		.align	2
 1008              	.L73:
 1009 0098 00000000 		.word	ADC_offset
 1010 009c 10270000 		.word	10000
 1011 00a0 00000000 		.word	ADC_countsPer10Volt
 1012              		.cfi_endproc
 1013              	.LFE17:
 1014              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1015              		.global	__aeabi_lmul
 1016              		.global	__aeabi_ldivmod
 1017              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1018              		.align	2
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 32


 1019              		.global	ADC_CountsTo_uVolts
 1020              		.code	16
 1021              		.thumb_func
 1022              		.type	ADC_CountsTo_uVolts, %function
 1023              	ADC_CountsTo_uVolts:
 1024              	.LFB18:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1025              		.loc 1 776 0
 1026              		.cfi_startproc
 1027 0000 B0B5     		push	{r4, r5, r7, lr}
 1028              		.cfi_def_cfa_offset 16
 1029              		.cfi_offset 4, -16
 1030              		.cfi_offset 5, -12
 1031              		.cfi_offset 7, -8
 1032              		.cfi_offset 14, -4
 1033 0002 86B0     		sub	sp, sp, #24
 1034              		.cfi_def_cfa_offset 40
 1035 0004 00AF     		add	r7, sp, #0
 1036              		.cfi_def_cfa_register 7
 1037 0006 F860     		str	r0, [r7, #12]
 1038 0008 0A1C     		mov	r2, r1
 1039 000a 3B1C     		mov	r3, r7
 1040 000c 0A33     		add	r3, r3, #10
 1041 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 33


 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1042              		.loc 1 780 0
 1043 0010 FB68     		ldr	r3, [r7, #12]
 1044 0012 002B     		cmp	r3, #0
 1045 0014 02D0     		beq	.L76
 1046              		.loc 1 780 0 is_stmt 0 discriminator 1
 1047 0016 0020     		mov	r0, #0
 1048 0018 FFF7FEFF 		bl	CyHalt
 1049              	.L76:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1050              		.loc 1 791 0 is_stmt 1
 1051 001c 3B1C     		mov	r3, r7
 1052 001e 0A33     		add	r3, r3, #10
 1053 0020 1A88     		ldrh	r2, [r3]
 1054 0022 1B4B     		ldr	r3, .L78+8
 1055 0024 F968     		ldr	r1, [r7, #12]
 1056 0026 4900     		lsl	r1, r1, #1
 1057 0028 CB5A     		ldrh	r3, [r1, r3]
 1058 002a 9BB2     		uxth	r3, r3
 1059 002c 9BB2     		uxth	r3, r3
 1060 002e D31A     		sub	r3, r2, r3
 1061 0030 9AB2     		uxth	r2, r3
 1062 0032 3B1C     		mov	r3, r7
 1063 0034 0A33     		add	r3, r3, #10
 1064 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1065              		.loc 1 793 0
 1066 0038 3B1C     		mov	r3, r7
 1067 003a 0A33     		add	r3, r3, #10
 1068 003c 1B88     		ldrh	r3, [r3]
 1069 003e 1BB2     		sxth	r3, r3
 1070 0040 3B60     		str	r3, [r7]
 1071 0042 DB17     		asr	r3, r3, #31
 1072 0044 7B60     		str	r3, [r7, #4]
 1073 0046 3868     		ldr	r0, [r7]
 1074 0048 7968     		ldr	r1, [r7, #4]
 1075 004a 104B     		ldr	r3, .L78+4
 1076 004c 0E4A     		ldr	r2, .L78
 1077 004e FFF7FEFF 		bl	__aeabi_lmul
 1078 0052 021C     		mov	r2, r0
 1079 0054 0B1C     		mov	r3, r1
 1080 0056 0F49     		ldr	r1, .L78+12
 1081 0058 F868     		ldr	r0, [r7, #12]
 1082 005a 8000     		lsl	r0, r0, #2
 1083 005c 4158     		ldr	r1, [r0, r1]
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 34


 1084 005e 0C1C     		mov	r4, r1
 1085 0060 C917     		asr	r1, r1, #31
 1086 0062 0D1C     		mov	r5, r1
 1087 0064 101C     		mov	r0, r2
 1088 0066 191C     		mov	r1, r3
 1089 0068 221C     		mov	r2, r4
 1090 006a 2B1C     		mov	r3, r5
 1091 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1092 0070 031C     		mov	r3, r0
 1093 0072 0C1C     		mov	r4, r1
 1094 0074 3B61     		str	r3, [r7, #16]
 1095 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1096              		.loc 1 795 0
 1097 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1098              		.loc 1 796 0
 1099 007a 181C     		mov	r0, r3
 1100 007c BD46     		mov	sp, r7
 1101 007e 06B0     		add	sp, sp, #24
 1102              		@ sp needed
 1103 0080 B0BD     		pop	{r4, r5, r7, pc}
 1104              	.L79:
 1105 0082 C046C046 		.align	3
 1105      C046
 1106              	.L78:
 1107 0088 80969800 		.word	10000000
 1108 008c 00000000 		.word	0
 1109 0090 00000000 		.word	ADC_offset
 1110 0094 00000000 		.word	ADC_countsPer10Volt
 1111              		.cfi_endproc
 1112              	.LFE18:
 1113              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1114              		.global	__aeabi_i2f
 1115              		.global	__aeabi_fmul
 1116              		.global	__aeabi_fdiv
 1117              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1118              		.align	2
 1119              		.global	ADC_CountsTo_Volts
 1120              		.code	16
 1121              		.thumb_func
 1122              		.type	ADC_CountsTo_Volts, %function
 1123              	ADC_CountsTo_Volts:
 1124              	.LFB19:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 35


 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1125              		.loc 1 821 0
 1126              		.cfi_startproc
 1127 0000 90B5     		push	{r4, r7, lr}
 1128              		.cfi_def_cfa_offset 12
 1129              		.cfi_offset 4, -12
 1130              		.cfi_offset 7, -8
 1131              		.cfi_offset 14, -4
 1132 0002 85B0     		sub	sp, sp, #20
 1133              		.cfi_def_cfa_offset 32
 1134 0004 00AF     		add	r7, sp, #0
 1135              		.cfi_def_cfa_register 7
 1136 0006 7860     		str	r0, [r7, #4]
 1137 0008 0A1C     		mov	r2, r1
 1138 000a BB1C     		add	r3, r7, #2
 1139 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1140              		.loc 1 825 0
 1141 000e 7B68     		ldr	r3, [r7, #4]
 1142 0010 002B     		cmp	r3, #0
 1143 0012 02D0     		beq	.L81
 1144              		.loc 1 825 0 is_stmt 0 discriminator 1
 1145 0014 0020     		mov	r0, #0
 1146 0016 FFF7FEFF 		bl	CyHalt
 1147              	.L81:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1148              		.loc 1 836 0 is_stmt 1
 1149 001a BB1C     		add	r3, r7, #2
 1150 001c 1A88     		ldrh	r2, [r3]
 1151 001e 154B     		ldr	r3, .L83
 1152 0020 7968     		ldr	r1, [r7, #4]
 1153 0022 4900     		lsl	r1, r1, #1
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 36


 1154 0024 CB5A     		ldrh	r3, [r1, r3]
 1155 0026 9BB2     		uxth	r3, r3
 1156 0028 9BB2     		uxth	r3, r3
 1157 002a D31A     		sub	r3, r2, r3
 1158 002c 9AB2     		uxth	r2, r3
 1159 002e BB1C     		add	r3, r7, #2
 1160 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1161              		.loc 1 838 0
 1162 0032 BB1C     		add	r3, r7, #2
 1163 0034 0022     		mov	r2, #0
 1164 0036 9B5E     		ldrsh	r3, [r3, r2]
 1165 0038 181C     		mov	r0, r3
 1166 003a FFF7FEFF 		bl	__aeabi_i2f
 1167 003e 031C     		add	r3, r0, #0
 1168 0040 181C     		add	r0, r3, #0
 1169 0042 0D49     		ldr	r1, .L83+4
 1170 0044 FFF7FEFF 		bl	__aeabi_fmul
 1171 0048 031C     		add	r3, r0, #0
 1172 004a 1C1C     		add	r4, r3, #0
 1173 004c 0B4B     		ldr	r3, .L83+8
 1174 004e 7A68     		ldr	r2, [r7, #4]
 1175 0050 9200     		lsl	r2, r2, #2
 1176 0052 D358     		ldr	r3, [r2, r3]
 1177 0054 181C     		mov	r0, r3
 1178 0056 FFF7FEFF 		bl	__aeabi_i2f
 1179 005a 031C     		add	r3, r0, #0
 1180 005c 201C     		add	r0, r4, #0
 1181 005e 191C     		add	r1, r3, #0
 1182 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1183 0064 031C     		add	r3, r0, #0
 1184 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1185              		.loc 1 840 0
 1186 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1187              		.loc 1 841 0
 1188 006a 181C     		add	r0, r3, #0
 1189 006c BD46     		mov	sp, r7
 1190 006e 05B0     		add	sp, sp, #20
 1191              		@ sp needed
 1192 0070 90BD     		pop	{r4, r7, pc}
 1193              	.L84:
 1194 0072 C046     		.align	2
 1195              	.L83:
 1196 0074 00000000 		.word	ADC_offset
 1197 0078 00002041 		.word	1092616192
 1198 007c 00000000 		.word	ADC_countsPer10Volt
 1199              		.cfi_endproc
 1200              	.LFE19:
 1201              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1202              		.text
 1203              	.Letext0:
 1204              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1205              		.section	.debug_info,"",%progbits
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 37


 1206              	.Ldebug_info0:
 1207 0000 70040000 		.4byte	0x470
 1208 0004 0400     		.2byte	0x4
 1209 0006 00000000 		.4byte	.Ldebug_abbrev0
 1210 000a 04       		.byte	0x4
 1211 000b 01       		.uleb128 0x1
 1212 000c D1020000 		.4byte	.LASF59
 1213 0010 01       		.byte	0x1
 1214 0011 27000000 		.4byte	.LASF60
 1215 0015 E3000000 		.4byte	.LASF61
 1216 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1217 001d 00000000 		.4byte	0
 1218 0021 00000000 		.4byte	.Ldebug_line0
 1219 0025 02       		.uleb128 0x2
 1220 0026 01       		.byte	0x1
 1221 0027 06       		.byte	0x6
 1222 0028 B9020000 		.4byte	.LASF0
 1223 002c 02       		.uleb128 0x2
 1224 002d 01       		.byte	0x1
 1225 002e 08       		.byte	0x8
 1226 002f 0A010000 		.4byte	.LASF1
 1227 0033 02       		.uleb128 0x2
 1228 0034 02       		.byte	0x2
 1229 0035 05       		.byte	0x5
 1230 0036 97000000 		.4byte	.LASF2
 1231 003a 02       		.uleb128 0x2
 1232 003b 02       		.byte	0x2
 1233 003c 07       		.byte	0x7
 1234 003d 84000000 		.4byte	.LASF3
 1235 0041 02       		.uleb128 0x2
 1236 0042 04       		.byte	0x4
 1237 0043 05       		.byte	0x5
 1238 0044 AB020000 		.4byte	.LASF4
 1239 0048 02       		.uleb128 0x2
 1240 0049 04       		.byte	0x4
 1241 004a 07       		.byte	0x7
 1242 004b 2F010000 		.4byte	.LASF5
 1243 004f 02       		.uleb128 0x2
 1244 0050 08       		.byte	0x8
 1245 0051 05       		.byte	0x5
 1246 0052 00000000 		.4byte	.LASF6
 1247 0056 02       		.uleb128 0x2
 1248 0057 08       		.byte	0x8
 1249 0058 07       		.byte	0x7
 1250 0059 EA010000 		.4byte	.LASF7
 1251 005d 03       		.uleb128 0x3
 1252 005e 04       		.byte	0x4
 1253 005f 05       		.byte	0x5
 1254 0060 696E7400 		.ascii	"int\000"
 1255 0064 02       		.uleb128 0x2
 1256 0065 04       		.byte	0x4
 1257 0066 07       		.byte	0x7
 1258 0067 CB010000 		.4byte	.LASF8
 1259 006b 04       		.uleb128 0x4
 1260 006c 91020000 		.4byte	.LASF9
 1261 0070 02       		.byte	0x2
 1262 0071 A1       		.byte	0xa1
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 38


 1263 0072 2C000000 		.4byte	0x2c
 1264 0076 04       		.uleb128 0x4
 1265 0077 A2010000 		.4byte	.LASF10
 1266 007b 02       		.byte	0x2
 1267 007c A2       		.byte	0xa2
 1268 007d 3A000000 		.4byte	0x3a
 1269 0081 04       		.uleb128 0x4
 1270 0082 B3010000 		.4byte	.LASF11
 1271 0086 02       		.byte	0x2
 1272 0087 A3       		.byte	0xa3
 1273 0088 48000000 		.4byte	0x48
 1274 008c 04       		.uleb128 0x4
 1275 008d 29010000 		.4byte	.LASF12
 1276 0091 02       		.byte	0x2
 1277 0092 A5       		.byte	0xa5
 1278 0093 33000000 		.4byte	0x33
 1279 0097 04       		.uleb128 0x4
 1280 0098 41010000 		.4byte	.LASF13
 1281 009c 02       		.byte	0x2
 1282 009d A6       		.byte	0xa6
 1283 009e 41000000 		.4byte	0x41
 1284 00a2 04       		.uleb128 0x4
 1285 00a3 C6000000 		.4byte	.LASF14
 1286 00a7 02       		.byte	0x2
 1287 00a8 A7       		.byte	0xa7
 1288 00a9 AD000000 		.4byte	0xad
 1289 00ad 02       		.uleb128 0x2
 1290 00ae 04       		.byte	0x4
 1291 00af 04       		.byte	0x4
 1292 00b0 4D000000 		.4byte	.LASF15
 1293 00b4 02       		.uleb128 0x2
 1294 00b5 08       		.byte	0x8
 1295 00b6 04       		.byte	0x4
 1296 00b7 8A010000 		.4byte	.LASF16
 1297 00bb 04       		.uleb128 0x4
 1298 00bc 4D030000 		.4byte	.LASF17
 1299 00c0 02       		.byte	0x2
 1300 00c1 AC       		.byte	0xac
 1301 00c2 4F000000 		.4byte	0x4f
 1302 00c6 02       		.uleb128 0x2
 1303 00c7 01       		.byte	0x1
 1304 00c8 08       		.byte	0x8
 1305 00c9 B4020000 		.4byte	.LASF18
 1306 00cd 05       		.uleb128 0x5
 1307 00ce 21000000 		.4byte	.LASF19
 1308 00d2 02       		.byte	0x2
 1309 00d3 4D01     		.2byte	0x14d
 1310 00d5 D9000000 		.4byte	0xd9
 1311 00d9 06       		.uleb128 0x6
 1312 00da 81000000 		.4byte	0x81
 1313 00de 02       		.uleb128 0x2
 1314 00df 04       		.byte	0x4
 1315 00e0 07       		.byte	0x7
 1316 00e1 2D020000 		.4byte	.LASF20
 1317 00e5 07       		.uleb128 0x7
 1318 00e6 08020000 		.4byte	.LASF24
 1319 00ea 01       		.byte	0x1
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 39


 1320 00eb 3F       		.byte	0x3f
 1321 00ec 00000000 		.4byte	.LFB2
 1322 00f0 24000000 		.4byte	.LFE2-.LFB2
 1323 00f4 01       		.uleb128 0x1
 1324 00f5 9C       		.byte	0x9c
 1325 00f6 08       		.uleb128 0x8
 1326 00f7 12020000 		.4byte	.LASF35
 1327 00fb 01       		.byte	0x1
 1328 00fc 5E       		.byte	0x5e
 1329 00fd 00000000 		.4byte	.LFB3
 1330 0101 A8010000 		.4byte	.LFE3-.LFB3
 1331 0105 01       		.uleb128 0x1
 1332 0106 9C       		.byte	0x9c
 1333 0107 36010000 		.4byte	0x136
 1334 010b 09       		.uleb128 0x9
 1335 010c 73020000 		.4byte	.LASF21
 1336 0110 01       		.byte	0x1
 1337 0111 60       		.byte	0x60
 1338 0112 81000000 		.4byte	0x81
 1339 0116 02       		.uleb128 0x2
 1340 0117 91       		.byte	0x91
 1341 0118 6C       		.sleb128 -20
 1342 0119 09       		.uleb128 0x9
 1343 011a D9000000 		.4byte	.LASF22
 1344 011e 01       		.byte	0x1
 1345 011f 61       		.byte	0x61
 1346 0120 81000000 		.4byte	0x81
 1347 0124 02       		.uleb128 0x2
 1348 0125 91       		.byte	0x91
 1349 0126 64       		.sleb128 -28
 1350 0127 09       		.uleb128 0x9
 1351 0128 E3010000 		.4byte	.LASF23
 1352 012c 01       		.byte	0x1
 1353 012d 62       		.byte	0x62
 1354 012e 97000000 		.4byte	0x97
 1355 0132 02       		.uleb128 0x2
 1356 0133 91       		.byte	0x91
 1357 0134 68       		.sleb128 -24
 1358 0135 00       		.byte	0
 1359 0136 0A       		.uleb128 0xa
 1360 0137 D8010000 		.4byte	.LASF25
 1361 013b 01       		.byte	0x1
 1362 013c 2701     		.2byte	0x127
 1363 013e 00000000 		.4byte	.LFB4
 1364 0142 38000000 		.4byte	.LFE4-.LFB4
 1365 0146 01       		.uleb128 0x1
 1366 0147 9C       		.byte	0x9c
 1367 0148 0B       		.uleb128 0xb
 1368 0149 53030000 		.4byte	.LASF26
 1369 014d 01       		.byte	0x1
 1370 014e 4A01     		.2byte	0x14a
 1371 0150 00000000 		.4byte	.LFB5
 1372 0154 18000000 		.4byte	.LFE5-.LFB5
 1373 0158 01       		.uleb128 0x1
 1374 0159 9C       		.byte	0x9c
 1375 015a 0B       		.uleb128 0xb
 1376 015b 5D020000 		.4byte	.LASF27
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 40


 1377 015f 01       		.byte	0x1
 1378 0160 6401     		.2byte	0x164
 1379 0162 00000000 		.4byte	.LFB6
 1380 0166 14000000 		.4byte	.LFE6-.LFB6
 1381 016a 01       		.uleb128 0x1
 1382 016b 9C       		.byte	0x9c
 1383 016c 0B       		.uleb128 0xb
 1384 016d 81020000 		.4byte	.LASF28
 1385 0171 01       		.byte	0x1
 1386 0172 7D01     		.2byte	0x17d
 1387 0174 00000000 		.4byte	.LFB7
 1388 0178 08000000 		.4byte	.LFE7-.LFB7
 1389 017c 01       		.uleb128 0x1
 1390 017d 9C       		.byte	0x9c
 1391 017e 0C       		.uleb128 0xc
 1392 017f 76010000 		.4byte	.LASF30
 1393 0183 01       		.byte	0x1
 1394 0184 9F01     		.2byte	0x19f
 1395 0186 81000000 		.4byte	0x81
 1396 018a 00000000 		.4byte	.LFB8
 1397 018e 48000000 		.4byte	.LFE8-.LFB8
 1398 0192 01       		.uleb128 0x1
 1399 0193 9C       		.byte	0x9c
 1400 0194 B7010000 		.4byte	0x1b7
 1401 0198 0D       		.uleb128 0xd
 1402 0199 79020000 		.4byte	.LASF32
 1403 019d 01       		.byte	0x1
 1404 019e 9F01     		.2byte	0x19f
 1405 01a0 81000000 		.4byte	0x81
 1406 01a4 02       		.uleb128 0x2
 1407 01a5 91       		.byte	0x91
 1408 01a6 6C       		.sleb128 -20
 1409 01a7 0E       		.uleb128 0xe
 1410 01a8 BF000000 		.4byte	.LASF29
 1411 01ac 01       		.byte	0x1
 1412 01ad A101     		.2byte	0x1a1
 1413 01af 81000000 		.4byte	0x81
 1414 01b3 02       		.uleb128 0x2
 1415 01b4 91       		.byte	0x91
 1416 01b5 74       		.sleb128 -12
 1417 01b6 00       		.byte	0
 1418 01b7 0F       		.uleb128 0xf
 1419 01b8 47010000 		.4byte	.LASF31
 1420 01bc 01       		.byte	0x1
 1421 01bd D501     		.2byte	0x1d5
 1422 01bf 8C000000 		.4byte	0x8c
 1423 01c3 00000000 		.4byte	.LFB9
 1424 01c7 44000000 		.4byte	.LFE9-.LFB9
 1425 01cb 01       		.uleb128 0x1
 1426 01cc 9C       		.byte	0x9c
 1427 01cd F0010000 		.4byte	0x1f0
 1428 01d1 0D       		.uleb128 0xd
 1429 01d2 21020000 		.4byte	.LASF33
 1430 01d6 01       		.byte	0x1
 1431 01d7 D501     		.2byte	0x1d5
 1432 01d9 81000000 		.4byte	0x81
 1433 01dd 02       		.uleb128 0x2
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 41


 1434 01de 91       		.byte	0x91
 1435 01df 6C       		.sleb128 -20
 1436 01e0 0E       		.uleb128 0xe
 1437 01e1 01020000 		.4byte	.LASF34
 1438 01e5 01       		.byte	0x1
 1439 01e6 D701     		.2byte	0x1d7
 1440 01e8 81000000 		.4byte	0x81
 1441 01ec 02       		.uleb128 0x2
 1442 01ed 91       		.byte	0x91
 1443 01ee 74       		.sleb128 -12
 1444 01ef 00       		.byte	0
 1445 01f0 10       		.uleb128 0x10
 1446 01f1 57010000 		.4byte	.LASF36
 1447 01f5 01       		.byte	0x1
 1448 01f6 0202     		.2byte	0x202
 1449 01f8 00000000 		.4byte	.LFB10
 1450 01fc 1C000000 		.4byte	.LFE10-.LFB10
 1451 0200 01       		.uleb128 0x1
 1452 0201 9C       		.byte	0x9c
 1453 0202 16020000 		.4byte	0x216
 1454 0206 0D       		.uleb128 0xd
 1455 0207 6E020000 		.4byte	.LASF37
 1456 020b 01       		.byte	0x1
 1457 020c 0202     		.2byte	0x202
 1458 020e 81000000 		.4byte	0x81
 1459 0212 02       		.uleb128 0x2
 1460 0213 91       		.byte	0x91
 1461 0214 74       		.sleb128 -12
 1462 0215 00       		.byte	0
 1463 0216 10       		.uleb128 0x10
 1464 0217 AF000000 		.4byte	.LASF38
 1465 021b 01       		.byte	0x1
 1466 021c 2E02     		.2byte	0x22e
 1467 021e 00000000 		.4byte	.LFB11
 1468 0222 30000000 		.4byte	.LFE11-.LFB11
 1469 0226 01       		.uleb128 0x1
 1470 0227 9C       		.byte	0x9c
 1471 0228 3C020000 		.4byte	0x23c
 1472 022c 0D       		.uleb128 0xd
 1473 022d 91010000 		.4byte	.LASF39
 1474 0231 01       		.byte	0x1
 1475 0232 2E02     		.2byte	0x22e
 1476 0234 81000000 		.4byte	0x81
 1477 0238 02       		.uleb128 0x2
 1478 0239 91       		.byte	0x91
 1479 023a 74       		.sleb128 -12
 1480 023b 00       		.byte	0
 1481 023c 10       		.uleb128 0x10
 1482 023d 18010000 		.4byte	.LASF40
 1483 0241 01       		.byte	0x1
 1484 0242 4302     		.2byte	0x243
 1485 0244 00000000 		.4byte	.LFB12
 1486 0248 2C000000 		.4byte	.LFE12-.LFB12
 1487 024c 01       		.uleb128 0x1
 1488 024d 9C       		.byte	0x9c
 1489 024e 62020000 		.4byte	0x262
 1490 0252 0D       		.uleb128 0xd
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 42


 1491 0253 53000000 		.4byte	.LASF41
 1492 0257 01       		.byte	0x1
 1493 0258 4302     		.2byte	0x243
 1494 025a 81000000 		.4byte	0x81
 1495 025e 02       		.uleb128 0x2
 1496 025f 91       		.byte	0x91
 1497 0260 74       		.sleb128 -12
 1498 0261 00       		.byte	0
 1499 0262 10       		.uleb128 0x10
 1500 0263 BA010000 		.4byte	.LASF42
 1501 0267 01       		.byte	0x1
 1502 0268 5B02     		.2byte	0x25b
 1503 026a 00000000 		.4byte	.LFB13
 1504 026e 1C000000 		.4byte	.LFE13-.LFB13
 1505 0272 01       		.uleb128 0x1
 1506 0273 9C       		.byte	0x9c
 1507 0274 88020000 		.4byte	0x288
 1508 0278 0D       		.uleb128 0xd
 1509 0279 6E020000 		.4byte	.LASF37
 1510 027d 01       		.byte	0x1
 1511 027e 5B02     		.2byte	0x25b
 1512 0280 81000000 		.4byte	0x81
 1513 0284 02       		.uleb128 0x2
 1514 0285 91       		.byte	0x91
 1515 0286 74       		.sleb128 -12
 1516 0287 00       		.byte	0
 1517 0288 10       		.uleb128 0x10
 1518 0289 67010000 		.4byte	.LASF43
 1519 028d 01       		.byte	0x1
 1520 028e 7202     		.2byte	0x272
 1521 0290 00000000 		.4byte	.LFB14
 1522 0294 1C000000 		.4byte	.LFE14-.LFB14
 1523 0298 01       		.uleb128 0x1
 1524 0299 9C       		.byte	0x9c
 1525 029a AE020000 		.4byte	0x2ae
 1526 029e 0D       		.uleb128 0xd
 1527 029f 6E020000 		.4byte	.LASF37
 1528 02a3 01       		.byte	0x1
 1529 02a4 7202     		.2byte	0x272
 1530 02a6 81000000 		.4byte	0x81
 1531 02aa 02       		.uleb128 0x2
 1532 02ab 91       		.byte	0x91
 1533 02ac 74       		.sleb128 -12
 1534 02ad 00       		.byte	0
 1535 02ae 11       		.uleb128 0x11
 1536 02af A1000000 		.4byte	.LASF44
 1537 02b3 01       		.byte	0x1
 1538 02b4 8E02     		.2byte	0x28e
 1539 02b6 00000000 		.4byte	.LFB15
 1540 02ba 30000000 		.4byte	.LFE15-.LFB15
 1541 02be 01       		.uleb128 0x1
 1542 02bf 9C       		.byte	0x9c
 1543 02c0 E3020000 		.4byte	0x2e3
 1544 02c4 0D       		.uleb128 0xd
 1545 02c5 21020000 		.4byte	.LASF33
 1546 02c9 01       		.byte	0x1
 1547 02ca 8E02     		.2byte	0x28e
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 43


 1548 02cc 81000000 		.4byte	0x81
 1549 02d0 02       		.uleb128 0x2
 1550 02d1 91       		.byte	0x91
 1551 02d2 74       		.sleb128 -12
 1552 02d3 0D       		.uleb128 0xd
 1553 02d4 46000000 		.4byte	.LASF45
 1554 02d8 01       		.byte	0x1
 1555 02d9 8E02     		.2byte	0x28e
 1556 02db 8C000000 		.4byte	0x8c
 1557 02df 02       		.uleb128 0x2
 1558 02e0 91       		.byte	0x91
 1559 02e1 72       		.sleb128 -14
 1560 02e2 00       		.byte	0
 1561 02e3 11       		.uleb128 0x11
 1562 02e4 71000000 		.4byte	.LASF46
 1563 02e8 01       		.byte	0x1
 1564 02e9 B002     		.2byte	0x2b0
 1565 02eb 00000000 		.4byte	.LFB16
 1566 02ef 2C000000 		.4byte	.LFE16-.LFB16
 1567 02f3 01       		.uleb128 0x1
 1568 02f4 9C       		.byte	0x9c
 1569 02f5 18030000 		.4byte	0x318
 1570 02f9 0D       		.uleb128 0xd
 1571 02fa 21020000 		.4byte	.LASF33
 1572 02fe 01       		.byte	0x1
 1573 02ff B002     		.2byte	0x2b0
 1574 0301 81000000 		.4byte	0x81
 1575 0305 02       		.uleb128 0x2
 1576 0306 91       		.byte	0x91
 1577 0307 74       		.sleb128 -12
 1578 0308 0D       		.uleb128 0xd
 1579 0309 9A010000 		.4byte	.LASF47
 1580 030d 01       		.byte	0x1
 1581 030e B002     		.2byte	0x2b0
 1582 0310 97000000 		.4byte	0x97
 1583 0314 02       		.uleb128 0x2
 1584 0315 91       		.byte	0x91
 1585 0316 70       		.sleb128 -16
 1586 0317 00       		.byte	0
 1587 0318 0F       		.uleb128 0xf
 1588 0319 5D000000 		.4byte	.LASF48
 1589 031d 01       		.byte	0x1
 1590 031e D102     		.2byte	0x2d1
 1591 0320 8C000000 		.4byte	0x8c
 1592 0324 00000000 		.4byte	.LFB17
 1593 0328 A4000000 		.4byte	.LFE17-.LFB17
 1594 032c 01       		.uleb128 0x1
 1595 032d 9C       		.byte	0x9c
 1596 032e 60030000 		.4byte	0x360
 1597 0332 0D       		.uleb128 0xd
 1598 0333 21020000 		.4byte	.LASF33
 1599 0337 01       		.byte	0x1
 1600 0338 D102     		.2byte	0x2d1
 1601 033a 81000000 		.4byte	0x81
 1602 033e 02       		.uleb128 0x2
 1603 033f 91       		.byte	0x91
 1604 0340 6C       		.sleb128 -20
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 44


 1605 0341 0D       		.uleb128 0xd
 1606 0342 A9010000 		.4byte	.LASF49
 1607 0346 01       		.byte	0x1
 1608 0347 D102     		.2byte	0x2d1
 1609 0349 8C000000 		.4byte	0x8c
 1610 034d 02       		.uleb128 0x2
 1611 034e 91       		.byte	0x91
 1612 034f 6A       		.sleb128 -22
 1613 0350 0E       		.uleb128 0xe
 1614 0351 26020000 		.4byte	.LASF50
 1615 0355 01       		.byte	0x1
 1616 0356 D302     		.2byte	0x2d3
 1617 0358 8C000000 		.4byte	0x8c
 1618 035c 02       		.uleb128 0x2
 1619 035d 91       		.byte	0x91
 1620 035e 76       		.sleb128 -10
 1621 035f 00       		.byte	0
 1622 0360 0F       		.uleb128 0xf
 1623 0361 36020000 		.4byte	.LASF51
 1624 0365 01       		.byte	0x1
 1625 0366 0703     		.2byte	0x307
 1626 0368 97000000 		.4byte	0x97
 1627 036c 00000000 		.4byte	.LFB18
 1628 0370 98000000 		.4byte	.LFE18-.LFB18
 1629 0374 01       		.uleb128 0x1
 1630 0375 9C       		.byte	0x9c
 1631 0376 A8030000 		.4byte	0x3a8
 1632 037a 0D       		.uleb128 0xd
 1633 037b 21020000 		.4byte	.LASF33
 1634 037f 01       		.byte	0x1
 1635 0380 0703     		.2byte	0x307
 1636 0382 81000000 		.4byte	0x81
 1637 0386 02       		.uleb128 0x2
 1638 0387 91       		.byte	0x91
 1639 0388 64       		.sleb128 -28
 1640 0389 0D       		.uleb128 0xd
 1641 038a A9010000 		.4byte	.LASF49
 1642 038e 01       		.byte	0x1
 1643 038f 0703     		.2byte	0x307
 1644 0391 8C000000 		.4byte	0x8c
 1645 0395 02       		.uleb128 0x2
 1646 0396 91       		.byte	0x91
 1647 0397 62       		.sleb128 -30
 1648 0398 0E       		.uleb128 0xe
 1649 0399 7D000000 		.4byte	.LASF52
 1650 039d 01       		.byte	0x1
 1651 039e 0903     		.2byte	0x309
 1652 03a0 BB000000 		.4byte	0xbb
 1653 03a4 02       		.uleb128 0x2
 1654 03a5 91       		.byte	0x91
 1655 03a6 68       		.sleb128 -24
 1656 03a7 00       		.byte	0
 1657 03a8 0F       		.uleb128 0xf
 1658 03a9 4A020000 		.4byte	.LASF53
 1659 03ad 01       		.byte	0x1
 1660 03ae 3403     		.2byte	0x334
 1661 03b0 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 45


 1662 03b4 00000000 		.4byte	.LFB19
 1663 03b8 80000000 		.4byte	.LFE19-.LFB19
 1664 03bc 01       		.uleb128 0x1
 1665 03bd 9C       		.byte	0x9c
 1666 03be F0030000 		.4byte	0x3f0
 1667 03c2 0D       		.uleb128 0xd
 1668 03c3 21020000 		.4byte	.LASF33
 1669 03c7 01       		.byte	0x1
 1670 03c8 3403     		.2byte	0x334
 1671 03ca 81000000 		.4byte	0x81
 1672 03ce 02       		.uleb128 0x2
 1673 03cf 91       		.byte	0x91
 1674 03d0 64       		.sleb128 -28
 1675 03d1 0D       		.uleb128 0xd
 1676 03d2 A9010000 		.4byte	.LASF49
 1677 03d6 01       		.byte	0x1
 1678 03d7 3403     		.2byte	0x334
 1679 03d9 8C000000 		.4byte	0x8c
 1680 03dd 02       		.uleb128 0x2
 1681 03de 91       		.byte	0x91
 1682 03df 62       		.sleb128 -30
 1683 03e0 0E       		.uleb128 0xe
 1684 03e1 1B020000 		.4byte	.LASF54
 1685 03e5 01       		.byte	0x1
 1686 03e6 3603     		.2byte	0x336
 1687 03e8 A2000000 		.4byte	0xa2
 1688 03ec 02       		.uleb128 0x2
 1689 03ed 91       		.byte	0x91
 1690 03ee 6C       		.sleb128 -20
 1691 03ef 00       		.byte	0
 1692 03f0 12       		.uleb128 0x12
 1693 03f1 81000000 		.4byte	0x81
 1694 03f5 00040000 		.4byte	0x400
 1695 03f9 13       		.uleb128 0x13
 1696 03fa DE000000 		.4byte	0xde
 1697 03fe 00       		.byte	0
 1698 03ff 00       		.byte	0
 1699 0400 09       		.uleb128 0x9
 1700 0401 0E000000 		.4byte	.LASF55
 1701 0405 01       		.byte	0x1
 1702 0406 21       		.byte	0x21
 1703 0407 11040000 		.4byte	0x411
 1704 040b 05       		.uleb128 0x5
 1705 040c 03       		.byte	0x3
 1706 040d 00000000 		.4byte	ADC_channelsConfig
 1707 0411 14       		.uleb128 0x14
 1708 0412 F0030000 		.4byte	0x3f0
 1709 0416 15       		.uleb128 0x15
 1710 0417 C5020000 		.4byte	.LASF56
 1711 041b 01       		.byte	0x1
 1712 041c 18       		.byte	0x18
 1713 041d 6B000000 		.4byte	0x6b
 1714 0421 05       		.uleb128 0x5
 1715 0422 03       		.byte	0x3
 1716 0423 00000000 		.4byte	ADC_initVar
 1717 0427 12       		.uleb128 0x12
 1718 0428 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 46


 1719 042c 37040000 		.4byte	0x437
 1720 0430 13       		.uleb128 0x13
 1721 0431 DE000000 		.4byte	0xde
 1722 0435 00       		.byte	0
 1723 0436 00       		.byte	0
 1724 0437 15       		.uleb128 0x15
 1725 0438 CE000000 		.4byte	.LASF57
 1726 043c 01       		.byte	0x1
 1727 043d 19       		.byte	0x19
 1728 043e 48040000 		.4byte	0x448
 1729 0442 05       		.uleb128 0x5
 1730 0443 03       		.byte	0x3
 1731 0444 00000000 		.4byte	ADC_offset
 1732 0448 06       		.uleb128 0x6
 1733 0449 27040000 		.4byte	0x427
 1734 044d 12       		.uleb128 0x12
 1735 044e 97000000 		.4byte	0x97
 1736 0452 5D040000 		.4byte	0x45d
 1737 0456 13       		.uleb128 0x13
 1738 0457 DE000000 		.4byte	0xde
 1739 045b 00       		.byte	0
 1740 045c 00       		.byte	0
 1741 045d 15       		.uleb128 0x15
 1742 045e 97020000 		.4byte	.LASF58
 1743 0462 01       		.byte	0x1
 1744 0463 1A       		.byte	0x1a
 1745 0464 6E040000 		.4byte	0x46e
 1746 0468 05       		.uleb128 0x5
 1747 0469 03       		.byte	0x3
 1748 046a 00000000 		.4byte	ADC_countsPer10Volt
 1749 046e 06       		.uleb128 0x6
 1750 046f 4D040000 		.4byte	0x44d
 1751 0473 00       		.byte	0
 1752              		.section	.debug_abbrev,"",%progbits
 1753              	.Ldebug_abbrev0:
 1754 0000 01       		.uleb128 0x1
 1755 0001 11       		.uleb128 0x11
 1756 0002 01       		.byte	0x1
 1757 0003 25       		.uleb128 0x25
 1758 0004 0E       		.uleb128 0xe
 1759 0005 13       		.uleb128 0x13
 1760 0006 0B       		.uleb128 0xb
 1761 0007 03       		.uleb128 0x3
 1762 0008 0E       		.uleb128 0xe
 1763 0009 1B       		.uleb128 0x1b
 1764 000a 0E       		.uleb128 0xe
 1765 000b 55       		.uleb128 0x55
 1766 000c 17       		.uleb128 0x17
 1767 000d 11       		.uleb128 0x11
 1768 000e 01       		.uleb128 0x1
 1769 000f 10       		.uleb128 0x10
 1770 0010 17       		.uleb128 0x17
 1771 0011 00       		.byte	0
 1772 0012 00       		.byte	0
 1773 0013 02       		.uleb128 0x2
 1774 0014 24       		.uleb128 0x24
 1775 0015 00       		.byte	0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 47


 1776 0016 0B       		.uleb128 0xb
 1777 0017 0B       		.uleb128 0xb
 1778 0018 3E       		.uleb128 0x3e
 1779 0019 0B       		.uleb128 0xb
 1780 001a 03       		.uleb128 0x3
 1781 001b 0E       		.uleb128 0xe
 1782 001c 00       		.byte	0
 1783 001d 00       		.byte	0
 1784 001e 03       		.uleb128 0x3
 1785 001f 24       		.uleb128 0x24
 1786 0020 00       		.byte	0
 1787 0021 0B       		.uleb128 0xb
 1788 0022 0B       		.uleb128 0xb
 1789 0023 3E       		.uleb128 0x3e
 1790 0024 0B       		.uleb128 0xb
 1791 0025 03       		.uleb128 0x3
 1792 0026 08       		.uleb128 0x8
 1793 0027 00       		.byte	0
 1794 0028 00       		.byte	0
 1795 0029 04       		.uleb128 0x4
 1796 002a 16       		.uleb128 0x16
 1797 002b 00       		.byte	0
 1798 002c 03       		.uleb128 0x3
 1799 002d 0E       		.uleb128 0xe
 1800 002e 3A       		.uleb128 0x3a
 1801 002f 0B       		.uleb128 0xb
 1802 0030 3B       		.uleb128 0x3b
 1803 0031 0B       		.uleb128 0xb
 1804 0032 49       		.uleb128 0x49
 1805 0033 13       		.uleb128 0x13
 1806 0034 00       		.byte	0
 1807 0035 00       		.byte	0
 1808 0036 05       		.uleb128 0x5
 1809 0037 16       		.uleb128 0x16
 1810 0038 00       		.byte	0
 1811 0039 03       		.uleb128 0x3
 1812 003a 0E       		.uleb128 0xe
 1813 003b 3A       		.uleb128 0x3a
 1814 003c 0B       		.uleb128 0xb
 1815 003d 3B       		.uleb128 0x3b
 1816 003e 05       		.uleb128 0x5
 1817 003f 49       		.uleb128 0x49
 1818 0040 13       		.uleb128 0x13
 1819 0041 00       		.byte	0
 1820 0042 00       		.byte	0
 1821 0043 06       		.uleb128 0x6
 1822 0044 35       		.uleb128 0x35
 1823 0045 00       		.byte	0
 1824 0046 49       		.uleb128 0x49
 1825 0047 13       		.uleb128 0x13
 1826 0048 00       		.byte	0
 1827 0049 00       		.byte	0
 1828 004a 07       		.uleb128 0x7
 1829 004b 2E       		.uleb128 0x2e
 1830 004c 00       		.byte	0
 1831 004d 3F       		.uleb128 0x3f
 1832 004e 19       		.uleb128 0x19
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 48


 1833 004f 03       		.uleb128 0x3
 1834 0050 0E       		.uleb128 0xe
 1835 0051 3A       		.uleb128 0x3a
 1836 0052 0B       		.uleb128 0xb
 1837 0053 3B       		.uleb128 0x3b
 1838 0054 0B       		.uleb128 0xb
 1839 0055 27       		.uleb128 0x27
 1840 0056 19       		.uleb128 0x19
 1841 0057 11       		.uleb128 0x11
 1842 0058 01       		.uleb128 0x1
 1843 0059 12       		.uleb128 0x12
 1844 005a 06       		.uleb128 0x6
 1845 005b 40       		.uleb128 0x40
 1846 005c 18       		.uleb128 0x18
 1847 005d 9642     		.uleb128 0x2116
 1848 005f 19       		.uleb128 0x19
 1849 0060 00       		.byte	0
 1850 0061 00       		.byte	0
 1851 0062 08       		.uleb128 0x8
 1852 0063 2E       		.uleb128 0x2e
 1853 0064 01       		.byte	0x1
 1854 0065 3F       		.uleb128 0x3f
 1855 0066 19       		.uleb128 0x19
 1856 0067 03       		.uleb128 0x3
 1857 0068 0E       		.uleb128 0xe
 1858 0069 3A       		.uleb128 0x3a
 1859 006a 0B       		.uleb128 0xb
 1860 006b 3B       		.uleb128 0x3b
 1861 006c 0B       		.uleb128 0xb
 1862 006d 27       		.uleb128 0x27
 1863 006e 19       		.uleb128 0x19
 1864 006f 11       		.uleb128 0x11
 1865 0070 01       		.uleb128 0x1
 1866 0071 12       		.uleb128 0x12
 1867 0072 06       		.uleb128 0x6
 1868 0073 40       		.uleb128 0x40
 1869 0074 18       		.uleb128 0x18
 1870 0075 9642     		.uleb128 0x2116
 1871 0077 19       		.uleb128 0x19
 1872 0078 01       		.uleb128 0x1
 1873 0079 13       		.uleb128 0x13
 1874 007a 00       		.byte	0
 1875 007b 00       		.byte	0
 1876 007c 09       		.uleb128 0x9
 1877 007d 34       		.uleb128 0x34
 1878 007e 00       		.byte	0
 1879 007f 03       		.uleb128 0x3
 1880 0080 0E       		.uleb128 0xe
 1881 0081 3A       		.uleb128 0x3a
 1882 0082 0B       		.uleb128 0xb
 1883 0083 3B       		.uleb128 0x3b
 1884 0084 0B       		.uleb128 0xb
 1885 0085 49       		.uleb128 0x49
 1886 0086 13       		.uleb128 0x13
 1887 0087 02       		.uleb128 0x2
 1888 0088 18       		.uleb128 0x18
 1889 0089 00       		.byte	0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 49


 1890 008a 00       		.byte	0
 1891 008b 0A       		.uleb128 0xa
 1892 008c 2E       		.uleb128 0x2e
 1893 008d 00       		.byte	0
 1894 008e 3F       		.uleb128 0x3f
 1895 008f 19       		.uleb128 0x19
 1896 0090 03       		.uleb128 0x3
 1897 0091 0E       		.uleb128 0xe
 1898 0092 3A       		.uleb128 0x3a
 1899 0093 0B       		.uleb128 0xb
 1900 0094 3B       		.uleb128 0x3b
 1901 0095 05       		.uleb128 0x5
 1902 0096 27       		.uleb128 0x27
 1903 0097 19       		.uleb128 0x19
 1904 0098 11       		.uleb128 0x11
 1905 0099 01       		.uleb128 0x1
 1906 009a 12       		.uleb128 0x12
 1907 009b 06       		.uleb128 0x6
 1908 009c 40       		.uleb128 0x40
 1909 009d 18       		.uleb128 0x18
 1910 009e 9642     		.uleb128 0x2116
 1911 00a0 19       		.uleb128 0x19
 1912 00a1 00       		.byte	0
 1913 00a2 00       		.byte	0
 1914 00a3 0B       		.uleb128 0xb
 1915 00a4 2E       		.uleb128 0x2e
 1916 00a5 00       		.byte	0
 1917 00a6 3F       		.uleb128 0x3f
 1918 00a7 19       		.uleb128 0x19
 1919 00a8 03       		.uleb128 0x3
 1920 00a9 0E       		.uleb128 0xe
 1921 00aa 3A       		.uleb128 0x3a
 1922 00ab 0B       		.uleb128 0xb
 1923 00ac 3B       		.uleb128 0x3b
 1924 00ad 05       		.uleb128 0x5
 1925 00ae 27       		.uleb128 0x27
 1926 00af 19       		.uleb128 0x19
 1927 00b0 11       		.uleb128 0x11
 1928 00b1 01       		.uleb128 0x1
 1929 00b2 12       		.uleb128 0x12
 1930 00b3 06       		.uleb128 0x6
 1931 00b4 40       		.uleb128 0x40
 1932 00b5 18       		.uleb128 0x18
 1933 00b6 9742     		.uleb128 0x2117
 1934 00b8 19       		.uleb128 0x19
 1935 00b9 00       		.byte	0
 1936 00ba 00       		.byte	0
 1937 00bb 0C       		.uleb128 0xc
 1938 00bc 2E       		.uleb128 0x2e
 1939 00bd 01       		.byte	0x1
 1940 00be 3F       		.uleb128 0x3f
 1941 00bf 19       		.uleb128 0x19
 1942 00c0 03       		.uleb128 0x3
 1943 00c1 0E       		.uleb128 0xe
 1944 00c2 3A       		.uleb128 0x3a
 1945 00c3 0B       		.uleb128 0xb
 1946 00c4 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 50


 1947 00c5 05       		.uleb128 0x5
 1948 00c6 27       		.uleb128 0x27
 1949 00c7 19       		.uleb128 0x19
 1950 00c8 49       		.uleb128 0x49
 1951 00c9 13       		.uleb128 0x13
 1952 00ca 11       		.uleb128 0x11
 1953 00cb 01       		.uleb128 0x1
 1954 00cc 12       		.uleb128 0x12
 1955 00cd 06       		.uleb128 0x6
 1956 00ce 40       		.uleb128 0x40
 1957 00cf 18       		.uleb128 0x18
 1958 00d0 9742     		.uleb128 0x2117
 1959 00d2 19       		.uleb128 0x19
 1960 00d3 01       		.uleb128 0x1
 1961 00d4 13       		.uleb128 0x13
 1962 00d5 00       		.byte	0
 1963 00d6 00       		.byte	0
 1964 00d7 0D       		.uleb128 0xd
 1965 00d8 05       		.uleb128 0x5
 1966 00d9 00       		.byte	0
 1967 00da 03       		.uleb128 0x3
 1968 00db 0E       		.uleb128 0xe
 1969 00dc 3A       		.uleb128 0x3a
 1970 00dd 0B       		.uleb128 0xb
 1971 00de 3B       		.uleb128 0x3b
 1972 00df 05       		.uleb128 0x5
 1973 00e0 49       		.uleb128 0x49
 1974 00e1 13       		.uleb128 0x13
 1975 00e2 02       		.uleb128 0x2
 1976 00e3 18       		.uleb128 0x18
 1977 00e4 00       		.byte	0
 1978 00e5 00       		.byte	0
 1979 00e6 0E       		.uleb128 0xe
 1980 00e7 34       		.uleb128 0x34
 1981 00e8 00       		.byte	0
 1982 00e9 03       		.uleb128 0x3
 1983 00ea 0E       		.uleb128 0xe
 1984 00eb 3A       		.uleb128 0x3a
 1985 00ec 0B       		.uleb128 0xb
 1986 00ed 3B       		.uleb128 0x3b
 1987 00ee 05       		.uleb128 0x5
 1988 00ef 49       		.uleb128 0x49
 1989 00f0 13       		.uleb128 0x13
 1990 00f1 02       		.uleb128 0x2
 1991 00f2 18       		.uleb128 0x18
 1992 00f3 00       		.byte	0
 1993 00f4 00       		.byte	0
 1994 00f5 0F       		.uleb128 0xf
 1995 00f6 2E       		.uleb128 0x2e
 1996 00f7 01       		.byte	0x1
 1997 00f8 3F       		.uleb128 0x3f
 1998 00f9 19       		.uleb128 0x19
 1999 00fa 03       		.uleb128 0x3
 2000 00fb 0E       		.uleb128 0xe
 2001 00fc 3A       		.uleb128 0x3a
 2002 00fd 0B       		.uleb128 0xb
 2003 00fe 3B       		.uleb128 0x3b
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 51


 2004 00ff 05       		.uleb128 0x5
 2005 0100 27       		.uleb128 0x27
 2006 0101 19       		.uleb128 0x19
 2007 0102 49       		.uleb128 0x49
 2008 0103 13       		.uleb128 0x13
 2009 0104 11       		.uleb128 0x11
 2010 0105 01       		.uleb128 0x1
 2011 0106 12       		.uleb128 0x12
 2012 0107 06       		.uleb128 0x6
 2013 0108 40       		.uleb128 0x40
 2014 0109 18       		.uleb128 0x18
 2015 010a 9642     		.uleb128 0x2116
 2016 010c 19       		.uleb128 0x19
 2017 010d 01       		.uleb128 0x1
 2018 010e 13       		.uleb128 0x13
 2019 010f 00       		.byte	0
 2020 0110 00       		.byte	0
 2021 0111 10       		.uleb128 0x10
 2022 0112 2E       		.uleb128 0x2e
 2023 0113 01       		.byte	0x1
 2024 0114 3F       		.uleb128 0x3f
 2025 0115 19       		.uleb128 0x19
 2026 0116 03       		.uleb128 0x3
 2027 0117 0E       		.uleb128 0xe
 2028 0118 3A       		.uleb128 0x3a
 2029 0119 0B       		.uleb128 0xb
 2030 011a 3B       		.uleb128 0x3b
 2031 011b 05       		.uleb128 0x5
 2032 011c 27       		.uleb128 0x27
 2033 011d 19       		.uleb128 0x19
 2034 011e 11       		.uleb128 0x11
 2035 011f 01       		.uleb128 0x1
 2036 0120 12       		.uleb128 0x12
 2037 0121 06       		.uleb128 0x6
 2038 0122 40       		.uleb128 0x40
 2039 0123 18       		.uleb128 0x18
 2040 0124 9742     		.uleb128 0x2117
 2041 0126 19       		.uleb128 0x19
 2042 0127 01       		.uleb128 0x1
 2043 0128 13       		.uleb128 0x13
 2044 0129 00       		.byte	0
 2045 012a 00       		.byte	0
 2046 012b 11       		.uleb128 0x11
 2047 012c 2E       		.uleb128 0x2e
 2048 012d 01       		.byte	0x1
 2049 012e 3F       		.uleb128 0x3f
 2050 012f 19       		.uleb128 0x19
 2051 0130 03       		.uleb128 0x3
 2052 0131 0E       		.uleb128 0xe
 2053 0132 3A       		.uleb128 0x3a
 2054 0133 0B       		.uleb128 0xb
 2055 0134 3B       		.uleb128 0x3b
 2056 0135 05       		.uleb128 0x5
 2057 0136 27       		.uleb128 0x27
 2058 0137 19       		.uleb128 0x19
 2059 0138 11       		.uleb128 0x11
 2060 0139 01       		.uleb128 0x1
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 52


 2061 013a 12       		.uleb128 0x12
 2062 013b 06       		.uleb128 0x6
 2063 013c 40       		.uleb128 0x40
 2064 013d 18       		.uleb128 0x18
 2065 013e 9642     		.uleb128 0x2116
 2066 0140 19       		.uleb128 0x19
 2067 0141 01       		.uleb128 0x1
 2068 0142 13       		.uleb128 0x13
 2069 0143 00       		.byte	0
 2070 0144 00       		.byte	0
 2071 0145 12       		.uleb128 0x12
 2072 0146 01       		.uleb128 0x1
 2073 0147 01       		.byte	0x1
 2074 0148 49       		.uleb128 0x49
 2075 0149 13       		.uleb128 0x13
 2076 014a 01       		.uleb128 0x1
 2077 014b 13       		.uleb128 0x13
 2078 014c 00       		.byte	0
 2079 014d 00       		.byte	0
 2080 014e 13       		.uleb128 0x13
 2081 014f 21       		.uleb128 0x21
 2082 0150 00       		.byte	0
 2083 0151 49       		.uleb128 0x49
 2084 0152 13       		.uleb128 0x13
 2085 0153 2F       		.uleb128 0x2f
 2086 0154 0B       		.uleb128 0xb
 2087 0155 00       		.byte	0
 2088 0156 00       		.byte	0
 2089 0157 14       		.uleb128 0x14
 2090 0158 26       		.uleb128 0x26
 2091 0159 00       		.byte	0
 2092 015a 49       		.uleb128 0x49
 2093 015b 13       		.uleb128 0x13
 2094 015c 00       		.byte	0
 2095 015d 00       		.byte	0
 2096 015e 15       		.uleb128 0x15
 2097 015f 34       		.uleb128 0x34
 2098 0160 00       		.byte	0
 2099 0161 03       		.uleb128 0x3
 2100 0162 0E       		.uleb128 0xe
 2101 0163 3A       		.uleb128 0x3a
 2102 0164 0B       		.uleb128 0xb
 2103 0165 3B       		.uleb128 0x3b
 2104 0166 0B       		.uleb128 0xb
 2105 0167 49       		.uleb128 0x49
 2106 0168 13       		.uleb128 0x13
 2107 0169 3F       		.uleb128 0x3f
 2108 016a 19       		.uleb128 0x19
 2109 016b 02       		.uleb128 0x2
 2110 016c 18       		.uleb128 0x18
 2111 016d 00       		.byte	0
 2112 016e 00       		.byte	0
 2113 016f 00       		.byte	0
 2114              		.section	.debug_aranges,"",%progbits
 2115 0000 A4000000 		.4byte	0xa4
 2116 0004 0200     		.2byte	0x2
 2117 0006 00000000 		.4byte	.Ldebug_info0
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 53


 2118 000a 04       		.byte	0x4
 2119 000b 00       		.byte	0
 2120 000c 0000     		.2byte	0
 2121 000e 0000     		.2byte	0
 2122 0010 00000000 		.4byte	.LFB2
 2123 0014 24000000 		.4byte	.LFE2-.LFB2
 2124 0018 00000000 		.4byte	.LFB3
 2125 001c A8010000 		.4byte	.LFE3-.LFB3
 2126 0020 00000000 		.4byte	.LFB4
 2127 0024 38000000 		.4byte	.LFE4-.LFB4
 2128 0028 00000000 		.4byte	.LFB5
 2129 002c 18000000 		.4byte	.LFE5-.LFB5
 2130 0030 00000000 		.4byte	.LFB6
 2131 0034 14000000 		.4byte	.LFE6-.LFB6
 2132 0038 00000000 		.4byte	.LFB7
 2133 003c 08000000 		.4byte	.LFE7-.LFB7
 2134 0040 00000000 		.4byte	.LFB8
 2135 0044 48000000 		.4byte	.LFE8-.LFB8
 2136 0048 00000000 		.4byte	.LFB9
 2137 004c 44000000 		.4byte	.LFE9-.LFB9
 2138 0050 00000000 		.4byte	.LFB10
 2139 0054 1C000000 		.4byte	.LFE10-.LFB10
 2140 0058 00000000 		.4byte	.LFB11
 2141 005c 30000000 		.4byte	.LFE11-.LFB11
 2142 0060 00000000 		.4byte	.LFB12
 2143 0064 2C000000 		.4byte	.LFE12-.LFB12
 2144 0068 00000000 		.4byte	.LFB13
 2145 006c 1C000000 		.4byte	.LFE13-.LFB13
 2146 0070 00000000 		.4byte	.LFB14
 2147 0074 1C000000 		.4byte	.LFE14-.LFB14
 2148 0078 00000000 		.4byte	.LFB15
 2149 007c 30000000 		.4byte	.LFE15-.LFB15
 2150 0080 00000000 		.4byte	.LFB16
 2151 0084 2C000000 		.4byte	.LFE16-.LFB16
 2152 0088 00000000 		.4byte	.LFB17
 2153 008c A4000000 		.4byte	.LFE17-.LFB17
 2154 0090 00000000 		.4byte	.LFB18
 2155 0094 98000000 		.4byte	.LFE18-.LFB18
 2156 0098 00000000 		.4byte	.LFB19
 2157 009c 80000000 		.4byte	.LFE19-.LFB19
 2158 00a0 00000000 		.4byte	0
 2159 00a4 00000000 		.4byte	0
 2160              		.section	.debug_ranges,"",%progbits
 2161              	.Ldebug_ranges0:
 2162 0000 00000000 		.4byte	.LFB2
 2163 0004 24000000 		.4byte	.LFE2
 2164 0008 00000000 		.4byte	.LFB3
 2165 000c A8010000 		.4byte	.LFE3
 2166 0010 00000000 		.4byte	.LFB4
 2167 0014 38000000 		.4byte	.LFE4
 2168 0018 00000000 		.4byte	.LFB5
 2169 001c 18000000 		.4byte	.LFE5
 2170 0020 00000000 		.4byte	.LFB6
 2171 0024 14000000 		.4byte	.LFE6
 2172 0028 00000000 		.4byte	.LFB7
 2173 002c 08000000 		.4byte	.LFE7
 2174 0030 00000000 		.4byte	.LFB8
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 54


 2175 0034 48000000 		.4byte	.LFE8
 2176 0038 00000000 		.4byte	.LFB9
 2177 003c 44000000 		.4byte	.LFE9
 2178 0040 00000000 		.4byte	.LFB10
 2179 0044 1C000000 		.4byte	.LFE10
 2180 0048 00000000 		.4byte	.LFB11
 2181 004c 30000000 		.4byte	.LFE11
 2182 0050 00000000 		.4byte	.LFB12
 2183 0054 2C000000 		.4byte	.LFE12
 2184 0058 00000000 		.4byte	.LFB13
 2185 005c 1C000000 		.4byte	.LFE13
 2186 0060 00000000 		.4byte	.LFB14
 2187 0064 1C000000 		.4byte	.LFE14
 2188 0068 00000000 		.4byte	.LFB15
 2189 006c 30000000 		.4byte	.LFE15
 2190 0070 00000000 		.4byte	.LFB16
 2191 0074 2C000000 		.4byte	.LFE16
 2192 0078 00000000 		.4byte	.LFB17
 2193 007c A4000000 		.4byte	.LFE17
 2194 0080 00000000 		.4byte	.LFB18
 2195 0084 98000000 		.4byte	.LFE18
 2196 0088 00000000 		.4byte	.LFB19
 2197 008c 80000000 		.4byte	.LFE19
 2198 0090 00000000 		.4byte	0
 2199 0094 00000000 		.4byte	0
 2200              		.section	.debug_line,"",%progbits
 2201              	.Ldebug_line0:
 2202 0000 33020000 		.section	.debug_str,"MS",%progbits,1
 2202      02004200 
 2202      00000201 
 2202      FB0E0D00 
 2202      01010101 
 2203              	.LASF6:
 2204 0000 6C6F6E67 		.ascii	"long long int\000"
 2204      206C6F6E 
 2204      6720696E 
 2204      7400
 2205              	.LASF55:
 2206 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2206      6368616E 
 2206      6E656C73 
 2206      436F6E66 
 2206      696700
 2207              	.LASF19:
 2208 0021 72656733 		.ascii	"reg32\000"
 2208      3200
 2209              	.LASF60:
 2210 0027 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2210      6E657261 
 2210      7465645F 
 2210      536F7572 
 2210      63655C50 
 2211              	.LASF45:
 2212 0046 6F666673 		.ascii	"offset\000"
 2212      657400
 2213              	.LASF15:
 2214 004d 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 55


 2214      7400
 2215              	.LASF41:
 2216 0053 68696768 		.ascii	"highLimit\000"
 2216      4C696D69 
 2216      7400
 2217              	.LASF48:
 2218 005d 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2218      436F756E 
 2218      7473546F 
 2218      5F6D566F 
 2218      6C747300 
 2219              	.LASF46:
 2220 0071 4144435F 		.ascii	"ADC_SetGain\000"
 2220      53657447 
 2220      61696E00 
 2221              	.LASF52:
 2222 007d 75566F6C 		.ascii	"uVolts\000"
 2222      747300
 2223              	.LASF3:
 2224 0084 73686F72 		.ascii	"short unsigned int\000"
 2224      7420756E 
 2224      7369676E 
 2224      65642069 
 2224      6E7400
 2225              	.LASF2:
 2226 0097 73686F72 		.ascii	"short int\000"
 2226      7420696E 
 2226      7400
 2227              	.LASF44:
 2228 00a1 4144435F 		.ascii	"ADC_SetOffset\000"
 2228      5365744F 
 2228      66667365 
 2228      7400
 2229              	.LASF38:
 2230 00af 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2230      5365744C 
 2230      6F774C69 
 2230      6D697400 
 2231              	.LASF29:
 2232 00bf 73746174 		.ascii	"status\000"
 2232      757300
 2233              	.LASF14:
 2234 00c6 666C6F61 		.ascii	"float32\000"
 2234      74333200 
 2235              	.LASF57:
 2236 00ce 4144435F 		.ascii	"ADC_offset\000"
 2236      6F666673 
 2236      657400
 2237              	.LASF22:
 2238 00d9 746D7052 		.ascii	"tmpRegVal\000"
 2238      65675661 
 2238      6C00
 2239              	.LASF61:
 2240 00e3 443A5C45 		.ascii	"D:\\ECEG_Labs\\BLE Lab 3\\BLE Lab 3.cydsn\000"
 2240      4345475F 
 2240      4C616273 
 2240      5C424C45 
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 56


 2240      204C6162 
 2241              	.LASF1:
 2242 010a 756E7369 		.ascii	"unsigned char\000"
 2242      676E6564 
 2242      20636861 
 2242      7200
 2243              	.LASF40:
 2244 0118 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2244      53657448 
 2244      6967684C 
 2244      696D6974 
 2244      00
 2245              	.LASF12:
 2246 0129 696E7431 		.ascii	"int16\000"
 2246      3600
 2247              	.LASF5:
 2248 012f 6C6F6E67 		.ascii	"long unsigned int\000"
 2248      20756E73 
 2248      69676E65 
 2248      6420696E 
 2248      7400
 2249              	.LASF13:
 2250 0141 696E7433 		.ascii	"int32\000"
 2250      3200
 2251              	.LASF31:
 2252 0147 4144435F 		.ascii	"ADC_GetResult16\000"
 2252      47657452 
 2252      6573756C 
 2252      74313600 
 2253              	.LASF36:
 2254 0157 4144435F 		.ascii	"ADC_SetChanMask\000"
 2254      53657443 
 2254      68616E4D 
 2254      61736B00 
 2255              	.LASF43:
 2256 0167 4144435F 		.ascii	"ADC_SetSatMask\000"
 2256      53657453 
 2256      61744D61 
 2256      736B00
 2257              	.LASF30:
 2258 0176 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2258      4973456E 
 2258      64436F6E 
 2258      76657273 
 2258      696F6E00 
 2259              	.LASF16:
 2260 018a 646F7562 		.ascii	"double\000"
 2260      6C6500
 2261              	.LASF39:
 2262 0191 6C6F774C 		.ascii	"lowLimit\000"
 2262      696D6974 
 2262      00
 2263              	.LASF47:
 2264 019a 61646347 		.ascii	"adcGain\000"
 2264      61696E00 
 2265              	.LASF10:
 2266 01a2 75696E74 		.ascii	"uint16\000"
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 57


 2266      313600
 2267              	.LASF49:
 2268 01a9 61646343 		.ascii	"adcCounts\000"
 2268      6F756E74 
 2268      7300
 2269              	.LASF11:
 2270 01b3 75696E74 		.ascii	"uint32\000"
 2270      333200
 2271              	.LASF42:
 2272 01ba 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2272      5365744C 
 2272      696D6974 
 2272      4D61736B 
 2272      00
 2273              	.LASF8:
 2274 01cb 756E7369 		.ascii	"unsigned int\000"
 2274      676E6564 
 2274      20696E74 
 2274      00
 2275              	.LASF25:
 2276 01d8 4144435F 		.ascii	"ADC_Enable\000"
 2276      456E6162 
 2276      6C6500
 2277              	.LASF23:
 2278 01e3 636F756E 		.ascii	"counts\000"
 2278      747300
 2279              	.LASF7:
 2280 01ea 6C6F6E67 		.ascii	"long long unsigned int\000"
 2280      206C6F6E 
 2280      6720756E 
 2280      7369676E 
 2280      65642069 
 2281              	.LASF34:
 2282 0201 72657375 		.ascii	"result\000"
 2282      6C7400
 2283              	.LASF24:
 2284 0208 4144435F 		.ascii	"ADC_Start\000"
 2284      53746172 
 2284      7400
 2285              	.LASF35:
 2286 0212 4144435F 		.ascii	"ADC_Init\000"
 2286      496E6974 
 2286      00
 2287              	.LASF54:
 2288 021b 766F6C74 		.ascii	"volts\000"
 2288      7300
 2289              	.LASF33:
 2290 0221 6368616E 		.ascii	"chan\000"
 2290      00
 2291              	.LASF50:
 2292 0226 6D566F6C 		.ascii	"mVolts\000"
 2292      747300
 2293              	.LASF20:
 2294 022d 73697A65 		.ascii	"sizetype\000"
 2294      74797065 
 2294      00
 2295              	.LASF51:
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 58


 2296 0236 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2296      436F756E 
 2296      7473546F 
 2296      5F75566F 
 2296      6C747300 
 2297              	.LASF53:
 2298 024a 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2298      436F756E 
 2298      7473546F 
 2298      5F566F6C 
 2298      747300
 2299              	.LASF27:
 2300 025d 4144435F 		.ascii	"ADC_StartConvert\000"
 2300      53746172 
 2300      74436F6E 
 2300      76657274 
 2300      00
 2301              	.LASF37:
 2302 026e 6D61736B 		.ascii	"mask\000"
 2302      00
 2303              	.LASF21:
 2304 0273 63684E75 		.ascii	"chNum\000"
 2304      6D00
 2305              	.LASF32:
 2306 0279 7265744D 		.ascii	"retMode\000"
 2306      6F646500 
 2307              	.LASF28:
 2308 0281 4144435F 		.ascii	"ADC_StopConvert\000"
 2308      53746F70 
 2308      436F6E76 
 2308      65727400 
 2309              	.LASF9:
 2310 0291 75696E74 		.ascii	"uint8\000"
 2310      3800
 2311              	.LASF58:
 2312 0297 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2312      636F756E 
 2312      74735065 
 2312      72313056 
 2312      6F6C7400 
 2313              	.LASF4:
 2314 02ab 6C6F6E67 		.ascii	"long int\000"
 2314      20696E74 
 2314      00
 2315              	.LASF18:
 2316 02b4 63686172 		.ascii	"char\000"
 2316      00
 2317              	.LASF0:
 2318 02b9 7369676E 		.ascii	"signed char\000"
 2318      65642063 
 2318      68617200 
 2319              	.LASF56:
 2320 02c5 4144435F 		.ascii	"ADC_initVar\000"
 2320      696E6974 
 2320      56617200 
 2321              	.LASF59:
 2322 02d1 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
ARM GAS  C:\Users\mliha\AppData\Local\Temp\ccEZMIp0.s 			page 59


 2322      4320342E 
 2322      382E3420 
 2322      32303134 
 2322      30353236 
 2323 0304 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2323      20726576 
 2323      6973696F 
 2323      6E203231 
 2323      31333538 
 2324 0337 30202D66 		.ascii	"0 -ffunction-sections\000"
 2324      66756E63 
 2324      74696F6E 
 2324      2D736563 
 2324      74696F6E 
 2325              	.LASF17:
 2326 034d 696E7436 		.ascii	"int64\000"
 2326      3400
 2327              	.LASF26:
 2328 0353 4144435F 		.ascii	"ADC_Stop\000"
 2328      53746F70 
 2328      00
 2329              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
